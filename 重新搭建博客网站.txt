name = dkl-justdoit
email = vaincourtship@gmail.com


安装nodejs软件，搭配环境
安装git软件
注册github账号

创建一个文件夹，如blog
在blog中右键打开Git bash，git 初始化配置如下：

 

git --version

clear

配置用户名和邮箱
git config --global user.name "dkl-justdoit"
git config --global user.email "vaincourtship@gmail.com"

dkl@dkl-PC MINGW64 /d/BLOGS
$ git config --global --list
user.name=dkl-justdoit
user.email=vaincourtship@gmail.com
credential.helper=store
core.editor=sublime_text.exe -w|1

.gitconfig文件可以备份下
[user]
	name = dkl-justdoit
	email = vaincourtship@gmail.com
[credential]
  helper = store
[core]
	editor = sublime_text.exe -w|1


初始化
git init 

查看分支
git branch -v

创建分支

git branch [新创建的分支名称]

再次查看分支
git branch -v

切换分支
git checkout [要选中的分支名]

在github上创建远程库
选择new repository
按照提示填写信息
点击create repository
*****************************************
create a new repository on the command line

echo "# [描述信息]" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/dkl-justdoit/test.git
git push -u origin master

*****************
push an existing repository from the command line

git remote add origin https://github.com/dkl-justdoit/test.git
git push -u origin master


给远程库添加别名
https://开头的

查看别名
git remote -v 

git remote add origin https://github.com/dkl-justdoit/test.git
#其中origin为https://的别名


再次查看别名
git remote -v 




推送本地库到远程库
git push 远程库/远程库别名 本地库的分支名

克隆远程库到本地
git clone 远程库https://地址或者git@github.com地址

ssh免密登录
进入用户主目录
cd ~
生成rsa或其他加密秘钥
mkdir -p ~/.ssh && cd ~/.ssh
# 我在 GitHub
ssh-keygen -t ed25519 -f my_github_ed25519  -C "vaincourtship@gmail.com"
# 我在 Gitee
ssh-keygen -t ed25519 -f my_gitee_ed25519   -C "me@gitee"
# 我在 GitLab
ssh-keygen -t ed25519 -f my_gitlab_ed25519  -C "me@gitlab"
# 我在企业
ssh-keygen -t ed25519 -f my_company_ed25519 -C "email@example.com"

添加到配置文件
将常用 SSH 信息写进全局配置文件，省得连接时配置。

编辑 ~/.ssh/config 文件：

# 关于别名
# Host 是别名，HostName 是真正的域名。
# 得益于别名，你可以直接以别名访问地址。例如：
# 无别名： git clone git@github.com:torvalds/linux.git
# 有别名： git clone github:torvalds/linux.git
# 本例中使用与域名一致的别名，以免错误的配置导致登录不上。

# 关于代理
# SOCKS 代理格式： ProxyCommand connect -S localhost:1080  %h %p
# HTTP 代理格式： ProxyCommand connect -H localhost:1080  %h %p
## SSH 代理依赖外部程序，这里使用了 Git for Windows 同捆的 connect.exe。
## Linux 下使用该代理方式需要额外安装 connect-proxy。

# 我在 GitHub
Host github.com
  Hostname github.com
#  ProxyCommand connect -H localhost:1080  %h %p
  User git
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/my_github_ed25519

# 我在 GitLab
Host gitlab.com
  Hostname gitlab.com
#  ProxyCommand connect -H localhost:1080  %h %p
  User git
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/my_gitlab_ed25519

# 我在 Gitee
Host gitee.com
  Hostname gitee.com
  User git
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/my_gitee_ed25519

# 我在企业
Host example.com
  Hostname example.com
  Port 22
  User git
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/my_company_ed25519
配置完毕。现在把 .pub 公钥文件发给服务器。

如果你懒得在每台机器上都配置一遍，把 ~/.ssh 下的文件放在安全的地方拷走即可。






































