<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cisco-Ruijie-Huawei-H3C-Note-startup</title>
    <link href="/p/f93ff5db.html"/>
    <url>/p/f93ff5db.html</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>twikoo评论插件暂时不弄了，反正就是做个笔记而已，有时间再说</title>
    <link href="/p/1941998.html"/>
    <url>/p/1941998.html</url>
    
    <content type="html"><![CDATA[<h1 id="搞得心态有点崩了，云部署都没有问题，但是envId填充到本地配置中，网页中并未出现评论插件"><a href="#搞得心态有点崩了，云部署都没有问题，但是envId填充到本地配置中，网页中并未出现评论插件" class="headerlink" title="搞得心态有点崩了，云部署都没有问题，但是envId填充到本地配置中，网页中并未出现评论插件"></a>搞得心态有点崩了，云部署都没有问题，但是envId填充到本地配置中，网页中并未出现评论插件</h1><p>大概率是因为之前那次主题下载后被修改了，而nodejs和npm又更新了，还有就是之前删了一些东西。忘记删啥了。不过没事，核心需求没问题就是，反正就是做个笔记，省的弄完就忘了。</p><p>今天就这样吧！</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aapanel国际版安装教程</title>
    <link href="/p/3d026f4b.html"/>
    <url>/p/3d026f4b.html</url>
    
    <content type="html"><![CDATA[<h1 id="先占个坑，后面再补充"><a href="#先占个坑，后面再补充" class="headerlink" title="先占个坑，后面再补充"></a>先占个坑，后面再补充</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我胡汉三又回来啦！哈哈哈哈啊哈哈哈</title>
    <link href="/p/5b06dbba.html"/>
    <url>/p/5b06dbba.html</url>
    
    <content type="html"><![CDATA[<h1 id="哈哈啊哈哈哈哈！我胡汉三又回来啦！"><a href="#哈哈啊哈哈哈哈！我胡汉三又回来啦！" class="headerlink" title="哈哈啊哈哈哈哈！我胡汉三又回来啦！"></a>哈哈啊哈哈哈哈！我胡汉三又回来啦！</h1><p>无语子，回归的第一篇博文就编译时就报错了，搞得我都有点怀疑我之前的博客环境是否出现了问题，其实并没有，只是<code>excerpt: </code>这个关键词没有填写内容，结果搞得我又重新把笔记本电脑的环境重新配置了一遍，其实并没有问题🐶🐶。本来还打算想着要不把整个博客仓库给删了重新搞，还好没有把博客整个仓库给删除，真删了真就GG了。</p><p>想着之前博客完全没有问题，怎么会突然出现问题了呢？所以就去对比了下前后博客创建以后有什么不同。结果发现以前的博客文章会有<code>abbrlink: </code>，而没有<code>excerpt: </code>，所以就猜测肯定是这些关键词或者和它们相关的插件出现了问题。</p><p>经过测试发现，还真特喵的是，<code>abbrlink: </code>是永久链接，在编译以后会自动添加到博客文章中，而<code>excerpt: </code>是摘要，之前并未做相关笔记，结果这次到底还是踩坑了，如果这个摘要填写内容了就不会有问题，注意<code>excerpt:</code>和<code>摘要内容</code>之间要有一个空格，准确来说是冒号后面必须要有一个空格。所以<code>excerpt:</code>要么就把摘要内容填写完整，要么就删除，这也是之前的博客文章没有<code>excerpt:</code>关键词的原因。<img src="/p/5b06dbba/%E6%B0%94%E5%88%B0%E5%8F%98%E5%BD%A2.jpg" alt="气到变形"></p><p>还好之前专门考虑过如何简单换电脑多端同步博客文章，保证博客文章的及时同步，所以结合之前的换电脑快速同步步骤把博客文章的环境又重新部署了下，非常方便。</p><p>还好今天手没有犯贱，如果把博客文章的仓库给删了，那真的是GG了，写文章的兴趣刚又拾起来，就又被浇灭了！！！</p><p>哈哈哈哈啊哈啊啊哈哈哈！以后每周争取都更一下，贵在坚持！！！今天就这样吧！！！</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>心情</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常废话</tag>
      
      <tag>心情日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation Pro各版本激活码</title>
    <link href="/p/c4e6dcce.html"/>
    <url>/p/c4e6dcce.html</url>
    
    <content type="html"><![CDATA[<h1 id="VMware-Workstation-Pro各版本激活码"><a href="#VMware-Workstation-Pro各版本激活码" class="headerlink" title="VMware Workstation Pro各版本激活码"></a>VMware Workstation Pro各版本激活码</h1><ul><li>VMware Workstation Pro 17 激活码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">MC60H-DWHD5-H80U9-6V85M-8280D<br>4A4RR-813DK-M81A9-4U35H-06KND<br>NZ4RR-FTK5H-H81C1-Q30QH-1V2LA<br>JU090-6039P-08409-8J0QH-2YR7F<br>4Y09U-AJK97-089Z0-A3054-83KLA<br>4C21U-2KK9Q-M8130-4V2QH-CF810<br>ZA30U-DXF84-4850Q-UMMXZ-W6K8F<br>AC590-2XW97-48EFZ-TZPQE-MYHEA<br>YF39K-DLFE5-H856Z-6NWZE-XQ2XD<br>AC15R-FNZ16-H8DWQ-WFPNV-M28E2<br>CZ1J8-A0D82-489LZ-ZMZQT-P3KX6<br>YA11K-6YE8H-H89ZZ-EXM59-Y6AR0<br></code></pre></td></tr></table></figure><ul><li>VMware Workstation Pro 16 激活码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZF3R0-FHED2-M80TY-8QYGC-NPKYF<br>YF390-0HF8P-M81RQ-2DXQE-M2UT6<br>ZF71R-DMX85-08DQY-8YMNC-PPHV8<br></code></pre></td></tr></table></figure><ul><li>VMware Workstation Pro 15 激活码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">UY758-0RXEQ-M81WP-8ZM7Z-Y3HDA<br>VF750-4MX5Q-488DQ-9WZE9-ZY2D6<br>UU54R-FVD91-488PP-7NNGC-ZFAX6<br>YC74H-FGF92-081VZ-R5QNG-P6RY4<br>YC34H-6WWDK-085MQ-JYPNX-NZRA2<br></code></pre></td></tr></table></figure><ul><li>VMware Workstation Pro 14 激活码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA<br>CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD<br></code></pre></td></tr></table></figure><ul><li>VMware Workstation Pro 12 激活码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">5A02H-AU243-TZJ49-GTC7K-3C61N<br>VF5XA-FNDDJ-085GZ-4NXZ9-N20E6<br>UC5MR-8NE16-H81WY-R7QGV-QG2D8<br>ZG1WH-ATY96-H80QP-X7PEX-Y30V4<br>AA3E0-0VDE1-0893Z-KGZ59-QGAVF<br></code></pre></td></tr></table></figure><ul><li>VMware Workstation Pro 10 激活码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1Z0G9-67285-FZG78-ZL3Q2-234JG<br>4C4EK-89KDL-5ZFP9-1LA5P-2A0J0<br>HY086-4T01N-CZ3U0-CV0QM-13DNU<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>VMware Workstation Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下载并安装Emeditor文本编辑器</title>
    <link href="/p/dbaa3bd7.html"/>
    <url>/p/dbaa3bd7.html</url>
    
    <content type="html"><![CDATA[<h1 id="下载并安装Emeditor文本编辑器"><a href="#下载并安装Emeditor文本编辑器" class="headerlink" title="下载并安装Emeditor文本编辑器"></a>下载并安装Emeditor文本编辑器</h1><ol><li>下载地址：<a href="https://www.emeditor.com/#download">https://www.emeditor.com/#download</a></li></ol><p><img src="/p/dbaa3bd7/image-9461129112919.png" alt="下载Emeditor安装包"></p><ol start="2"><li>下载完成后双击Emeditor安装包，然后点击下一步</li></ol><p><img src="/p/dbaa3bd7/image-5421129113040.png" alt="双击安装包开始安装Emeditor"></p><ol start="3"><li>选择安装类型，不能选择，只能保持默认，点击下一步</li></ol><p><img src="/p/dbaa3bd7/image-4981129113114.png" alt="安装类型只能保持默认"></p><ol start="4"><li>接受许可，点击下一步</li></ol><p><img src="/p/dbaa3bd7/image-9081129113235.png" alt="接受安装许可协议"></p><ol start="5"><li>选择安装类型：自定义安装</li></ol><p><img src="/p/dbaa3bd7/image-3881129113347.png" alt="安装类型选择自定义"></p><ol start="6"><li>点击程序菜单快捷方式和文件关联，点击下一步</li></ol><p><img src="/p/dbaa3bd7/image-7431129113525.png" alt="自定义安装"></p><ol start="7"><li>点击安装，等待安装完成</li></ol><p><img src="/p/dbaa3bd7/image-2081129113833.png" alt="安装"></p><ol start="8"><li>点击完成，启动Emeditor文本编辑器</li></ol><p><img src="/p/dbaa3bd7/image-1451129113914.png" alt="Emeditor安装完成"></p><ol start="9"><li>点击”使用EmEditor Professional”，输入注册码</li></ol><p><img src="/p/dbaa3bd7/image-8091129114016.png" alt="点击专业版进行激活"></p><p><img src="/p/dbaa3bd7/image-8451129114551.png" alt="输入注册码"></p><p><img src="/p/dbaa3bd7/image-1679694165860.png" alt="激活成功"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>Emeditor</tag>
      
      <tag>文本编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware workstation pro 17安装教程</title>
    <link href="/p/2a12cdd2.html"/>
    <url>/p/2a12cdd2.html</url>
    
    <content type="html"><![CDATA[<h1 id="VMware-Workstation-17-PRO安装教程"><a href="#VMware-Workstation-17-PRO安装教程" class="headerlink" title="VMware Workstation 17 PRO安装教程"></a>VMware Workstation 17 PRO安装教程</h1><h2 id="1、官网下载VMware-Workstation-17-PRO"><a href="#1、官网下载VMware-Workstation-17-PRO" class="headerlink" title="1、官网下载VMware Workstation 17 PRO"></a>1、官网下载VMware Workstation 17 PRO</h2><p>下载链接：<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html</a></p><h2 id="2、安装之后填入激活码"><a href="#2、安装之后填入激活码" class="headerlink" title="2、安装之后填入激活码"></a>2、安装之后填入激活码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">VMware Workstation 17 PRO激活码：<br>MC60H-DWHD5-H80U9-6V85M-8280D<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>VMware workstation pro 17</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当前版本：Windows 11 2022 更新| 版本 22H2</title>
    <link href="/p/f18a7dc4.html"/>
    <url>/p/f18a7dc4.html</url>
    
    <content type="html"><![CDATA[<h1 id="下载win11用来探索新功能"><a href="#下载win11用来探索新功能" class="headerlink" title="下载win11用来探索新功能"></a>下载win11用来探索新功能</h1><p>当前版本：Windows 11 2022 更新 l 版本 22H2</p><ul><li>win11(简体中文)：<a href="https://software.download.prss.microsoft.com/dbazure/Win11_22H2_Chinese_Simplified_x64v1.iso?t=506aba1f-618d-4bf6-9064-a5e9b46563e3&amp;e=1669002722&amp;h=f805a6218c8f7a0876477b44f2843955282a20206e682b33a736916c8ea16fdb">https://software.download.prss.microsoft.com/dbazure/Win11_22H2_Chinese_Simplified_x64v1.iso?t=506aba1f-618d-4bf6-9064-a5e9b46563e3&amp;e=1669002722&amp;h=f805a6218c8f7a0876477b44f2843955282a20206e682b33a736916c8ea16fdb</a></li><li>win11英语(美国)：<a href="https://software.download.prss.microsoft.com/dbazure/Win11_22H2_English_x64v1.iso?t=c7909304-2557-4313-9084-20eb73925a85&amp;e=1669002452&amp;h=264464254a3812b1f12d8ffe24a700c77d28d1fc42621f46692fa8563e0b6281">https://software.download.prss.microsoft.com/dbazure/Win11_22H2_English_x64v1.iso?t=c7909304-2557-4313-9084-20eb73925a85&amp;e=1669002452&amp;h=264464254a3812b1f12d8ffe24a700c77d28d1fc42621f46692fa8563e0b6281</a></li><li>如果您想验证下载数据的完整性和真实性，请按照以下步骤操作：</li></ul><ol><li><p>下载所需产品 ISO 文件，并按照安装指南进行操作。</p></li><li><p>开启 Windows PowerShell。如果您需要查找操作系统中 PowerShell 的位置，请单击<a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-windows-powershell?view=powershell-7">此处</a>查看帮助。</p></li><li><p>在 PowerShell 中，使用 Get-FileHash cmdlet 计算您下载的 ISO 文件的哈希值。例如：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-built_in">FileHash</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Users</span>\<span class="hljs-variable">vain</span>\<span class="hljs-variable">Downloads</span>\<span class="hljs-type">Contoso8_</span><span class="hljs-number">1</span><span class="hljs-type">_ENT</span><span class="hljs-operator">.</span><span class="hljs-variable">iso</span><br></code></pre></td></tr></table></figure></li><li><p>如果 SHA256 输出结果与下表中的数值相符，即可确认您下载产品的文件未遭到破坏、篡改或与原文件有差别。</p></li></ol><p>其他详细信息，请通过 <a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/get-filehash?view=powershell-7">Get-FileHash</a> 命令获取。</p><table><thead><tr><th>阿拉伯语 64-bit</th><th>393C928718AFE938CAB0C81B657F9513C563AED63528F8C8DDDF87FD23443160</th></tr></thead><tbody><tr><td>保加利亚语 64-bit</td><td>326CF197DEE443B7DB429356C3F825EB8EA48B2CAB1EED0B22D854F64C192459</td></tr><tr><td>丹麦语 64-bit</td><td>C29A404614E5B75DD6E3CC1F901942E53036D6E4E0F878123B7D9274673E7BDD</td></tr><tr><td>德语 64-bit</td><td>2AD545B9091E67BABB25DDBA5EACFED2018B388557D82A1F2002597DC559661B</td></tr><tr><td>希腊语 64-bit</td><td>6EA4FAEB127A34DEDC1B0FFCDC3CAAA3B6DB5C96AE8791671E4DAAAAF8D55AB0</td></tr><tr><td>英语（国际） 64-bit</td><td>F115CD6B31734BC091BC94B964D5AD43984285BF229503481E2F7EF94AB7140E</td></tr><tr><td>英语 64-bit</td><td>0DF2F173D84D00743DC08ED824FBD174D972929BD84B87FE384ED950F5BDAB22</td></tr><tr><td>西班牙语 64-bit</td><td>2AC6A7B2DA30937FB435C71945BE2DBB0CD1B6768850CE9FEC61AFF8E727E15A</td></tr><tr><td>西班牙语（墨西哥） 64-bit</td><td>8D67F2EA1B5FC42EF6EE3DA51D61EDDBF8A05EABCF3029AEC76A08F29647B2C1</td></tr><tr><td>爱沙尼亚语 64-bit</td><td>9FDDF91F6EA467B1D37F7E1A762D611DF60C5EC400D55E814B38488FEB659323</td></tr><tr><td>芬兰语 64-bit</td><td>52F866E8E902E5F3ADC33282283081D378721C5635A1370AA1888CC6F2557931</td></tr><tr><td>加拿大法语 64-bit</td><td>40DEDFBBD25977D9245A645190C902DEB24FFEF4B4B46B823733189B3F378AB0</td></tr><tr><td>法语 64-bit</td><td>DD5082F658887AC012DD5532834E9D2BF4E57829DFC6D2A2F1EC328ECFE91BF2</td></tr><tr><td>希伯来语 64-bit</td><td>ED4342F76B55E2E1B7850110D90058EDDFA4CEAEB8B392BAA363F2FF1BBE539E</td></tr><tr><td>克罗地亚语 64-bit</td><td>690AA36215FFBCF883CB7217FD857283EF2B415F8B79D6F9257B6A03ADDFEA14</td></tr><tr><td>匈牙利语 64-bit</td><td>FF1CFCCA88A3E514D1381FF3F03FD53F776C32F072F4281D6AAF7EA7835908C1</td></tr><tr><td>意大利语 64-bit</td><td>BC36716D566D5ABF1F6551EFE0F8161C3955EDDCB0113680E169CAF23F5A9E14</td></tr><tr><td>日语 64-bit</td><td>6393559146B2A32F3A33DE430EAF1BC59B61133A12E2580A2F163540AC43E463</td></tr><tr><td>朝鲜语 64-bit</td><td>901E3EC44053E0955F96B03A2A3D795F5F086A385E669226124912D85D4677A4</td></tr><tr><td>立陶宛语 64-bit</td><td>EA492CC90CB08CDBF6B73EC6E1EDB0567823029CA4EBDF948DD10AAC8C8F181B</td></tr><tr><td>拉脱维亚语 64-bit</td><td>14DE9C1D641F963B49F31345C1F9DC702F9D6E8E27957C94E5967692ACAAC970</td></tr><tr><td>挪威语 64-bit</td><td>C96BAF3E4325456E477488D02E7559A8A281BE0BFA347AE76F5E9411E6C533C7</td></tr><tr><td>荷兰语 64-bit</td><td>D3B61F2332D60E5B2FD64D6C499033B18735C6A0A84F445FF0153E6AE43F6CF7</td></tr><tr><td>波兰语 64-bit</td><td>D57F431D392743AEC19C5666AE45B3388084880E699E23C4C827946B7DC17760</td></tr><tr><td>巴西葡萄牙语 64-bit</td><td>A73A5362ABAEE00E55B4C5E1C704CDA3AA270E2E2240EF40CE737E0BC5D684EE</td></tr><tr><td>葡萄牙语 64-bit</td><td>C995F5CA4F60B1021003C8E7CEE9A07D6FAFF95660199E7EE44C833FB1CF0452</td></tr><tr><td>罗马尼亚语 64-bit</td><td>72C4FEB2EE85C2934490AD7B92C6703353A167739D98804AFD38EA84960FFAFE</td></tr><tr><td>俄语 64-bit</td><td>8CEC8785CDBE2FA8D4CE4DA230D332F610D165482EBBBF446E056EE4D4202735</td></tr><tr><td>斯洛伐克语 64-bit</td><td>7A4877211E16997ED767F588001F8FBE207B7B2C4D183A8E8A45F5E07F885591</td></tr><tr><td>斯洛文尼亚语 64-bit</td><td>8B3B558A222E5237BA0C77971C0DE7BC1EC0570D970E6142F346C148457CF43A</td></tr><tr><td>塞尔维亚语（拉丁语） 64-bit</td><td>BB27D9A503EDC8EEF0A6A087A83AC258BFD11DAEC9F21F32D750D66BA9279BE8</td></tr><tr><td>瑞典语 64-bit</td><td>3B5C70D56AC833FD6FA1182E900B42CE891D0ED8A31835EBB23F0406EB78C3B3</td></tr><tr><td>泰语 64-bit</td><td>E8E9C5BBEB4BFFE9F8320512B191E7A5F08B7DF302F6D77898F8340EEF577412</td></tr><tr><td>土耳其语 64-bit</td><td>F23709784575AD33599D4B310B98AB8F1B0D989840F5DEB74E38BBBD5369ACEE</td></tr><tr><td>乌克兰语 64-bit</td><td>B5DDC3628E191F30CDD801AC27C0D630E7E7FDB2B50ACDBB50E1A2000962DEB2</td></tr><tr><td>家庭中文版 64-bit</td><td>8F83004EE84323BA1F4DAA8B1210BDD9071057FC5DB59966DA23B9B0036D6DC6</td></tr><tr><td>简体中文 64-bit</td><td>3ED12FC9EE8A84C040637AE51ABF2795CEA6A7291319B1C456A4DF1CBC1D625D</td></tr><tr><td>繁体中文 64-bit</td><td>F622D3654FAC2D391AA8658C1A31907B130A82F2E60F528086D2A4752BC00046</td></tr></tbody></table><p><em>Links valid for 24 hours from time of creation.</em></p><p><em>Links expire: 11&#x2F;21&#x2F;2022 3:47:31 AM UTC</em></p>]]></content>
    
    
    <categories>
      
      <category>ISO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows11</tag>
      
      <tag>ISO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git中SSH常见错误处理</title>
    <link href="/p/39d6ddf6.html"/>
    <url>/p/39d6ddf6.html</url>
    
    <content type="html"><![CDATA[<h1 id="git-push-ssh-origin-hexo-source-报错：ERROR-we’re-doing-an-SSH-key-audit-的解决办法"><a href="#git-push-ssh-origin-hexo-source-报错：ERROR-we’re-doing-an-SSH-key-audit-的解决办法" class="headerlink" title="git push ssh_origin hexo-source 报错：ERROR: we’re doing an SSH key audit.的解决办法"></a>git push ssh_origin hexo-source 报错：ERROR: we’re doing an SSH key audit.的解决办法</h1><p>由于Git Bash是命令行交互，所以在出现报错后的回显信息很重要。好多时候，解决方案就在回显信息中。如题，这个报错的解决方案就在回显信息中，如下图所示：</p><p><img src="/p/39d6ddf6/%E8%BF%99%E4%B8%AA%E9%94%99%E8%AF%AF%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8F%90%E4%B8%AA%E6%9D%83%E9%99%90%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8%E4%BA%86.png"></p><p>所以这个只需要访问<code>https://github.com/settings/keys/*****</code>进行提权即可解决。出现这个问题的原因是因为修改GitHub远程仓库的默认分支，导致SSH_key权限出现了问题。当然这个问题很容易就能解决，不过我们关注的不应该仅仅是报错本身，更应该关注解决问题的方法和思路。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub网页版删除指定仓库指定分支</title>
    <link href="/p/88cb5e96.html"/>
    <url>/p/88cb5e96.html</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub网页版删除指定仓库指定分支"><a href="#GitHub网页版删除指定仓库指定分支" class="headerlink" title="GitHub网页版删除指定仓库指定分支"></a>GitHub网页版删除指定仓库指定分支</h1><h2 id="1、在网页版登录，进入你的工程项目，点击代码上方的“branch”按钮。"><a href="#1、在网页版登录，进入你的工程项目，点击代码上方的“branch”按钮。" class="headerlink" title="1、在网页版登录，进入你的工程项目，点击代码上方的“branch”按钮。"></a>1、在网页版登录，进入你的工程项目，点击代码上方的“branch”按钮。</h2><p><img src="/p/88cb5e96/image-20221121210237881.png" alt="image-20221121210237881"></p><h2 id="2、之后你可以看到所有分支，点击垃圾筒图标删除你想删除的分支即可。"><a href="#2、之后你可以看到所有分支，点击垃圾筒图标删除你想删除的分支即可。" class="headerlink" title="2、之后你可以看到所有分支，点击垃圾筒图标删除你想删除的分支即可。"></a>2、之后你可以看到所有分支，点击垃圾筒图标删除你想删除的分支即可。</h2><p><img src="/p/88cb5e96/image-20221121210355198.png" alt="image-20221121210355198"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub网页版</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题优化记录</title>
    <link href="/p/e6469cc7.html"/>
    <url>/p/e6469cc7.html</url>
    
    <content type="html"><![CDATA[<h1 id="fluid主题优化记录"><a href="#fluid主题优化记录" class="headerlink" title="fluid主题优化记录"></a>fluid主题优化记录</h1><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>为了不给以后更新添麻烦，优化过程中尽量不涉及fluid主题源码修改。因此，本文将尽量只通过修改博客配置文件和主题配置文件以及引入各种js和css文件，来美化fluid主题。</p><h3 id="2-Fluid-页脚增加网站运行时长"><a href="#2-Fluid-页脚增加网站运行时长" class="headerlink" title="2. Fluid 页脚增加网站运行时长"></a>2. Fluid 页脚增加网站运行时长</h3><p>首先，需要把<code>主题配置文件</code>中的 <code>footer: content</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;div style=&quot;font-size: 0.85rem&quot;&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/assets/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></td></tr></table></figure><p>其中，<code>content</code> 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。<code>duration.js</code> 包含的才是功能代码，我们在博客目录下创建 <code>source/assets/js/duration.js</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/** 计时起始时间，自行修改 **/</span><br>  <span class="hljs-keyword">var</span> start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2022/06/18 13:00:00&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - start) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - start) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站安全运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>其次，不要忘记把上面注释的时间改为自己的时间，至此这项功能就引入到 <code>&lt;footer&gt;</code> 里了。</p><p><code>注意：</code>assets文件夹是我个人自己创建用来存放优化博客主题的所有类型的文件，如<code>图片、视频、音频、js、css</code>等。其中，<code>js</code>的路径为：<code>D:\dkl-justdoit.github.io\source\assets\js</code></p><h3 id="3-浏览器标签图标与博客标题"><a href="#3-浏览器标签图标与博客标题" class="headerlink" title="3.浏览器标签图标与博客标题"></a>3.浏览器标签图标与博客标题</h3><p>在<code>主题配置文件</code>中查找<code>favicon</code>，然后将<code>favicon</code>和<code>apple_touch_icon</code>对应的<code>fluid.png</code>进行替换为自定义的浏览器标签图标即可。</p><p>另外，博客页面左上角的博客标题，默认是使用<strong>站点配置</strong>中的 <code>title</code>，这个配置同时控制着网页在浏览器标签中的标题，如需单独区别设置，可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">博客标题</span><br><span class="hljs-string">修改为：</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">vaincourtship</span>  <br></code></pre></td></tr></table></figure><h3 id="4-创建关于页"><a href="#4-创建关于页" class="headerlink" title="4. 创建关于页"></a>4. 创建关于页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;about&quot;</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-07-02 21:23:29</span><br><span class="hljs-attr">banner_img:</span> <br><span class="hljs-attr">comment:</span> <span class="hljs-string">&#x27;twikoo&#x27;</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">## 介绍一下自己</span><br><br><span class="hljs-string">我就是我，不一样的烟火！！</span><br></code></pre></td></tr></table></figure><h3 id="5-创建留言版-自定义页面"><a href="#5-创建留言版-自定义页面" class="headerlink" title="5. 创建留言版(自定义页面)"></a>5. 创建留言版(自定义页面)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page remark<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/remark/index.md</code>，添加 <code>layout</code> 属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>layout: <span class="hljs-string">&quot;remark&quot;</span><br>title: 留言板<br><span class="hljs-built_in">date</span>: 2022-08-05 13:20:32<br>banner_img: <br>comment: <span class="hljs-string">&#x27;twikoo&#x27;</span><br>---<br><br>欢迎留言，请留下邮箱方便我回复您！<br></code></pre></td></tr></table></figure><h3 id="6-更换头像及社交帐号"><a href="#6-更换头像及社交帐号" class="headerlink" title="6. 更换头像及社交帐号"></a>6. 更换头像及社交帐号</h3><p>在<code>主题配置文件</code>中找到<code>about</code>，介绍自己的信息，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span> <span class="hljs-comment"># 关于页的顶部大图</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span> <span class="hljs-comment"># 博客头像</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;vaincourtship&quot;</span> <span class="hljs-comment"># 博客名称</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;慢慢来，谁还没有一个努力的过程！&quot;</span> <span class="hljs-comment"># 自我介绍</span><br>  <span class="hljs-comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span><br>  <span class="hljs-comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span><br>  <span class="hljs-attr">icons:</span> <span class="hljs-comment"># 这里是社交账号选项，可以自定义添加</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-douban-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://douban.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;豆瓣&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/assets/img/favicon.png&quot;</span> &#125; <span class="hljs-comment"># 把微信二维码放到这里</span><br></code></pre></td></tr></table></figure><p>其中，banner_img可以保持不变；avatar改为自己的头像；name改为博客名称。当然，还可以增加其他社交账号，具体如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/dkl-justdoit&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-gitee-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://gitee.com/dkl-justdoit&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;Gitee&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-google-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://mail.google.com/mail/u/0/&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;Gmail&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-youtube-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://www.youtube.com/&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;YouTube&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-twitter-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://twitter.com/&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;twitter&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-bilibili-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://space.bilibili.com/361104740&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;哔哩哔哩&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/assets/img/favicon.png&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-weibo-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://weibo.com/u/7209354933&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;微博&quot;</span> &#125;<br>    <span class="hljs-comment"># - &#123; class: &quot;iconfont icon-link-fill&quot;, link: &quot;https://www.cnblogs.com/dkl-justdoit/&quot;, tip: &quot;博客园&quot; &#125;</span><br><span class="hljs-comment"># menu菜单栏开启，这里就不要开启了，两个地方都开启，有些多余</span><br></code></pre></td></tr></table></figure><h3 id="7-导航栏菜单"><a href="#7-导航栏菜单" class="headerlink" title="7. 导航栏菜单"></a>7. 导航栏菜单</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;留言板&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/remark/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-cliplist&#x27;</span> &#125; <span class="hljs-comment"># 新增</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;博客园&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://www.cnblogs.com/dkl-justdoit/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125; <span class="hljs-comment"># 新增</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;links&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/links/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125; <span class="hljs-comment"># 启用即可</span><br></code></pre></td></tr></table></figure><h3 id="8-页面顶部大图和文章首页图"><a href="#8-页面顶部大图和文章首页图" class="headerlink" title="8. 页面顶部大图和文章首页图"></a>8. 页面顶部大图和文章首页图</h3><p>在<code>主题配置文件</code>中查找<code>post:</code>，其中的<code>banner_img: /img/default.png</code>决定了每一篇文章页面的默认顶部大图，如果新建文章没有指定<code>banner_img:</code>的路径，那默认就是<code>default.png</code>这个图。</p><p>在<code>主题配置文件</code>中查找<code>index_img</code>，可以看到关于<code>index_img</code>的解释，就是文章在首页的默认封面图，如果指定了就按指定的显示，否则就按默认封面图<code>default_index_img:</code>显示，但是默认没有指定。当然，可以通过手动指定封面图片，也可以通过随机图片API的调用来实现。</p><h3 id="9-首页文章的随机封面图"><a href="#9-首页文章的随机封面图" class="headerlink" title="9. 首页文章的随机封面图"></a>9. 首页文章的随机封面图</h3><p>如果文章没有指定封面图，可以通过调用随机图片API来实现，API将随机返回一张图片作为封面图，比如与MC酱相关的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">https://api.ixiaowai.cn/mcapi/mcapi.php<br></code></pre></td></tr></table></figure><p>在主题配置文件中找到<code>default_index_img:</code>，然后将链接填入其中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">default_index_img:</span> <span class="hljs-string">https://api.ixiaowai.cn/mcapi/mcapi.php</span><br></code></pre></td></tr></table></figure><h3 id="10-slogan打字机"><a href="#10-slogan打字机" class="headerlink" title="10.  slogan打字机"></a>10.  slogan打字机</h3><p>在<code>主题配置文件</code>中查找<code>slogan:</code>，更改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-comment"># Independent config of home page subtitle</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;慢慢来，谁还没有一个努力的过程！&quot;</span> <span class="hljs-comment"># 这里更改为想要替换的文字</span><br></code></pre></td></tr></table></figure><h3 id="11-文章post模板"><a href="#11-文章post模板" class="headerlink" title="11. 文章post模板"></a>11. 文章post模板</h3><p>博客scaffolds目录下包含三个模板文件，其中draft和post的内容一致，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br><span class="hljs-comment"># 页面布局</span><br>layout: <br><span class="hljs-comment"># 文章标题</span><br>title: &#123;&#123; title &#125;&#125;<br><span class="hljs-comment"># 发布时间，如果没有排序字段，会根据事件排序。</span><br><span class="hljs-built_in">date</span>: &#123;&#123; <span class="hljs-built_in">date</span> &#125;&#125;<br><span class="hljs-comment"># 排序，越大越靠前。</span><br><span class="hljs-comment"># sticky: 1000</span><br><span class="hljs-comment"># 最后更新时间</span><br>updated: <br><span class="hljs-comment"># 评论插件</span><br>comment: <span class="hljs-string">&#x27;twikoo&#x27;</span><br><span class="hljs-comment"># 是否隐藏文章</span><br>hide: <span class="hljs-literal">false</span><br><span class="hljs-comment"># 标签</span><br>tags:<br>  - 网络<br>  - Linux<br><span class="hljs-comment"># 分类</span><br>categories: <br>  - [Linux]<br>  - [网络]<br><span class="hljs-comment"># 文章摘要</span><br>excerpt: <br><span class="hljs-comment"># 页面顶部大图</span><br>banner_img: /assets/img/banner/xxx.jpg<br><span class="hljs-comment"># 文章首页显示图片</span><br>index_img: /assets/img/common/xxx.jpg<br><span class="hljs-comment"># 是否启用LaTeX</span><br>math: <span class="hljs-literal">false</span><br>---<br><span class="hljs-comment"># 这里要注意的是，如果“文章摘要excerpt: ”有出现但不填写，是会报错的，要么写摘要，要么把“excerpt: ”用“#”注释掉</span><br></code></pre></td></tr></table></figure><p>page内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>layout: <br>title: &#123;&#123; title &#125;&#125;<br><span class="hljs-built_in">date</span>: &#123;&#123; <span class="hljs-built_in">date</span> &#125;&#125;<br>banner_img: <br>comment: <span class="hljs-string">&#x27;twikoo&#x27;</span><br>---<br></code></pre></td></tr></table></figure><h3 id="12-永久链接"><a href="#12-永久链接" class="headerlink" title="12. 永久链接"></a>12. 永久链接</h3><p>Hexo 默认文章链接生成规则是按照年、月、日、标题来生成的。一旦文章标题或者发布时间被修改，URL 就会发生变化，之前文章地址也会变成 404，而且 URL 层级很深，不利于分享和搜索引擎收录。可以借助插件 <code>hexo-abbrlink</code>来实现。</p><p>安装过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">博客根目录下执行：npm install hexo-abbrlink --save<br>修改博客根目录配置文件_config.yml中的permalink：<br><span class="hljs-comment"># permalink: :year/:month/:day/:title/</span><br><span class="hljs-comment"># 下面四行是安装插件后自行添加的</span><br>permalink: p/:abbrlink.html  <span class="hljs-comment"># p 是自定义的前缀</span><br>abbrlink:<br>    alg: crc32   <span class="hljs-comment">#算法： crc16(default) and crc32</span><br>    rep: hex     <span class="hljs-comment">#进制： dec(default) and hex</span><br>进行验证：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br>推送博客到远程仓库：hexo d<br></code></pre></td></tr></table></figure><p>会发现该插件会在每篇文章的开头增加内容<code>abbrlink: 39d6ddf6</code>，这个字符串就是这篇文章的唯一标识，无论修改标题还是发布文章都不会改变。</p><h3 id="13-js或css的引入过程"><a href="#13-js或css的引入过程" class="headerlink" title="13. js或css的引入过程"></a>13. js或css的引入过程</h3><ol><li>新建js或css</li></ol><p>以js为例，在themes&#x2F;hexo-theme-fluid&#x2F;source&#x2F;js&#x2F;diy&#x2F;文件夹下新建一个timeDateRun.js，找到一段可用的js美化代码，复制粘贴到新建的timeDateRun.js文件中。然后在主题配置文件themes&#x2F;hexo-theme-fluid&#x2F;_config.yml中找到”custom_js”和”custom_css”，进行新建js文件和css文件的引入。</p><ol start="2"><li>将新建的js或css引入主题</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_js:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/js/diy/timeDateRun.js</span> <span class="hljs-comment"># 运行时间</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/daxuehua.js</span> <span class="hljs-comment"># 大雪花飘落</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/css/diy/shubiao.css</span> <span class="hljs-comment"># 鼠标指针</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/daziyanse.css</span> <span class="hljs-comment"># 头部打字机颜色</span><br><span class="hljs-comment"># 这里的timeDateRun.js和shubiao.css都是自己找的主题美化代码，这里的相对路径是以主题的source文件夹为根目录的</span><br></code></pre></td></tr></table></figure><h3 id="14-js类特效实现"><a href="#14-js类特效实现" class="headerlink" title="14. js类特效实现"></a>14. js类特效实现</h3><ol><li>动态彩带</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/caidai.js</span> <span class="hljs-comment"># 动态彩带</span><br></code></pre></td></tr></table></figure><ol start="2"><li>静态彩带点击改变形状</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/jingtaisidai.js</span> <span class="hljs-comment"># 静态彩带</span><br></code></pre></td></tr></table></figure><ol start="3"><li>动态黑色线条</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiantiao.js</span> <span class="hljs-comment"># 动态黑色线条</span><br></code></pre></td></tr></table></figure><ol start="4"><li>小雪花飘落</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxuehua.js</span> <span class="hljs-comment"># 小雪花飘落</span><br></code></pre></td></tr></table></figure><ol start="5"><li>樱花飘落</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/yinghua.js</span> <span class="hljs-comment"># 樱花飘落</span><br></code></pre></td></tr></table></figure><ol start="6"><li>鼠标跟随小星星</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxingxing.js</span> <span class="hljs-comment"># 鼠标跟随小星星</span><br></code></pre></td></tr></table></figure><ol start="7"><li>页脚加入运行时间</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/timeDate.js</span> <span class="hljs-comment"># 运行时间</span><br></code></pre></td></tr></table></figure><ol start="8"><li>大雪花飘落</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/daxuehua.js</span> <span class="hljs-comment"># 大雪花飘落</span><br></code></pre></td></tr></table></figure><ol start="9"><li>鼠标点击出字</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/dianjichuzi.js</span> <span class="hljs-comment"># 鼠标点击出字</span><br></code></pre></td></tr></table></figure><ol start="10"><li>鼠标点击出小爱心❤</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/love.js</span> <span class="hljs-comment"># 鼠标点击出小爱心❤</span><br></code></pre></td></tr></table></figure><h3 id="15-CSS类特效实现"><a href="#15-CSS类特效实现" class="headerlink" title="15. CSS类特效实现"></a>15. CSS类特效实现</h3><ol><li>头部打字机颜色效果渐变</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/toubudaziji.css</span> <span class="hljs-comment"># 头部打字机颜色效果渐变</span><br></code></pre></td></tr></table></figure><ol start="2"><li>头部打字机颜色</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/daziyanse.css</span> <span class="hljs-comment"># 头部打字机颜色</span><br></code></pre></td></tr></table></figure><h3 id="16-评论插件"><a href="#16-评论插件" class="headerlink" title="16. 评论插件"></a>16. 评论插件</h3><p>评论插件推荐使用 <code>Valine</code>、<code>Waline</code> 或者 <code>twikoo</code>。这里推荐使用 <code>twikoo</code>，配置集成相对于简单。<code>twikoo</code> 支持自动拉取QQ头像、图文评论、点赞回复、ip归属地、关键字过滤、 提供API获取最近评论信息等。另外，<a href="https://twikoo.js.org/quick-start.html#%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2">twikoo 安装教程</a> 推荐使用手动部署，购买每月6.58元的优惠基础版即可。</p><p><img src="/p/e6469cc7/image-2981206162720.png" alt="image-2981206162720"></p><p>安装结束配置<code>twikoo</code>参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">twikoo:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">visitor:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">envId:</span> <span class="hljs-string">&lt;环境id&gt;</span> <br>  <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span><br>  <span class="hljs-comment"># region: ap-guangzhou # 环境地域，默认为 ap-shanghai，腾讯云环境填 ap-shanghai 或 ap-guangzhou；Vercel 环境不填</span><br></code></pre></td></tr></table></figure><p>评论需要每个页面单独开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 博客开启评论</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">twikoo</span><br><span class="hljs-comment"># 友链开启评论</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">twikoo</span><br></code></pre></td></tr></table></figure><h3 id="17-文章摘要excerpt"><a href="#17-文章摘要excerpt" class="headerlink" title="17. 文章摘要excerpt"></a>17. 文章摘要excerpt</h3><p>文章摘要<code>excerpt:</code>的内容部分必须要有内容，否则会出现报错提示。解决方法有两个，要么在文章的摘要部分填写这篇文章的摘要，要么就把<code>excerpt:</code>这个标签给注释掉。</p><h3 id="18-hide标签"><a href="#18-hide标签" class="headerlink" title="18. hide标签"></a>18. hide标签</h3><p>在 Hexo 中通过 Front-matter(它是以 — 分隔的区域，用于指定个别文件的变量)可以很方便的指定个别文件的变量，举例如下，通过 Front-matter，可以使用<code>hide标签</code>来决定是否隐藏文章。<code>hide: true</code> or <code>hide: false</code>，隐藏文章或取消隐藏，正常显示文章。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
      <tag>博客主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何通过hash来核对下载后的文件与官方给的文件是否相同</title>
    <link href="/p/fb722cd5.html"/>
    <url>/p/fb722cd5.html</url>
    
    <content type="html"><![CDATA[<h1 id="如何通过hash来核对下载后的文件与官方给的文件是否相同"><a href="#如何通过hash来核对下载后的文件与官方给的文件是否相同" class="headerlink" title="如何通过hash来核对下载后的文件与官方给的文件是否相同"></a>如何通过hash来核对下载后的文件与官方给的文件是否相同</h1><h2 id="1、打开校验的文件所在目录"><a href="#1、打开校验的文件所在目录" class="headerlink" title="1、打开校验的文件所在目录"></a>1、打开校验的文件所在目录</h2><p><img src="/p/fb722cd5/%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95.png" alt="打开文件所在目录"></p><h2 id="2、查看目录内的文件，然后计算核对文件HASH"><a href="#2、查看目录内的文件，然后计算核对文件HASH" class="headerlink" title="2、查看目录内的文件，然后计算核对文件HASH"></a>2、查看目录内的文件，然后计算核对文件HASH</h2><p><img src="/p/fb722cd5/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hash%E6%9D%A5%E6%A0%B8%E5%AF%B9%E4%B8%8B%E8%BD%BD%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8E%E5%AE%98%E6%96%B9%E7%BB%99%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C.png" alt="如何通过hash来核对下载后的文件与官方给的文件是否相同"></p><h2 id="3、将计算出来的HASH与官方提供的HASH进行对比即可"><a href="#3、将计算出来的HASH与官方提供的HASH进行对比即可" class="headerlink" title="3、将计算出来的HASH与官方提供的HASH进行对比即可"></a>3、将计算出来的HASH与官方提供的HASH进行对比即可</h2>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>HASH校验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo + typora + sublime text + github 博客搭建终极版</title>
    <link href="/p/5f3481.html"/>
    <url>/p/5f3481.html</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-typora-sublime-text-github-博客搭建终极版"><a href="#hexo-typora-sublime-text-github-博客搭建终极版" class="headerlink" title="hexo + typora + sublime text  + github 博客搭建终极版"></a>hexo + typora + sublime text  + github 博客搭建终极版</h1><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="hexo博客结构说明"><a href="#hexo博客结构说明" class="headerlink" title="hexo博客结构说明"></a>hexo博客结构说明</h3><ul><li>现在使用的博客目录结构：<br>BLOGS中有一个blogs子文件夹，blogs子文件夹是专门用来存放博客源文件用的。由于想要多端同步博客源文件，这里便将BLOGS文件夹下所有的博客源文件推送到<code>dkl-justdoit.github.io</code>远程仓库的<code>hexo-source</code>分支。博客发布时，可以在blogs文件夹中使用hexo三件套来进行新博客的发布，推送到<code>dkl-justdoit.github.io</code>远程仓库的<code>main</code>(默认)分支。</li><li>以后可以使用的博客目录结构：<br>其实完全可以不用单独创建一个专门用来存储博客源文件的文件夹，可以直接放到根文件夹BLOGS下，只用一个BLOGS文件夹也是可以的，不会影响博客源文件的备份以及新博客的正常发布。</li></ul><p>其实，二者的区别就在于进行博客初始化时，在BLOGS中执行的是”<code>hexo init blogs</code>“还是”<code>hexo init</code>“，如果是前者，那么就会在BLOGS中默认创建一个blogs文件夹，用来存放博客源文件，同时还会生成一些其他必要的文件；如果是后者，就不会创建blogs文件夹，生成的那些必要文件会直接存放到BLOGS文件夹中。因此，关键点在于在<code>hexo init</code>初始化时，在BLOGS文件夹内是执行“<code>hexo init blogs</code>”还是“<code>hexo init</code>”，其他本质上没有区别。</p><h3 id="关于多主题共存的说明"><a href="#关于多主题共存的说明" class="headerlink" title="关于多主题共存的说明"></a>关于多主题共存的说明</h3><ol><li><p>多主题共存，以fluid为例，不是将主题推送到 <code>git@github.com:dkl-justdoit/dkl-justdoit.github.io.git</code> ，而是推送到 <code>git@github.com:dkl-justdoit/hexo-theme-fluid.git</code> 。因此，所有修改过后的主题是保存到对应主题仓库下的[主题名]分支(若以fluid为例，就是保存到 <code>git@github.com:dkl-justdoit/hexo-theme-fluid.git</code> 的fluid分支)。所以，针对多主题共存，需要在本地仓库的主题目录中新创建分支，然后再推送到远程库并关联追踪。</p></li><li><p>对于博客源文件，在博客根目录下，使用git推送到 <code>git@github.com:dkl-justdoit/dkl-justdoit.github.io.git</code> 的hexo-source分支，这样可以在其他电脑直接同步博客，不影响博客写作，也避免了冲突的发生。前提是每次写完博客推送到Github pages发布页后还要将博客源码推送到hexo-source分支。</p></li><li><p>对于展示出来的hexo博客的html&#x2F;css&#x2F;js文件则是推送到main分支。原因是因为hexo博客的站点根目录的配置文件中就已经定义了会将展示用的html&#x2F;css&#x2F;js文件推送到 <code>git@github.com:dkl-justdoit/dkl-justdoit.github.io.git</code> 的哪个分支。</p></li></ol><h2 id="hexo-typora-sublime-text-github-博客具体搭建过程"><a href="#hexo-typora-sublime-text-github-博客具体搭建过程" class="headerlink" title="hexo + typora + sublime text + github 博客具体搭建过程"></a>hexo + typora + sublime text + github 博客具体搭建过程</h2><h3 id="1-下载安装Git"><a href="#1-下载安装Git" class="headerlink" title="1. 下载安装Git"></a>1. 下载安装Git</h3><ol><li>官网下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ol><p><img src="/p/5f3481/image-20221126175618194.png" alt="image-20221126175618194"></p><ol start="2"><li>下载完成后，双击2.38.1版本安装包进行安装，点击next</li></ol><p><img src="/p/5f3481/image-20221125213053792.png" alt="image-20221125213053792"></p><ol start="3"><li>修改git的默认安装路径，点击next</li></ol><p><img src="/p/5f3481/image-20221126174552220.png" alt="image-20221126174552220"></p><ol start="4"><li>选择要安装的组件配置，点击next(由于git更新可能会影响后来安装的nodejs，故这里取消更新检查)</li></ol><p><img src="/p/5f3481/image-20221126174617041.png" alt="image-20221126174617041"></p><ol start="5"><li>选择开始菜单文件夹，点击next</li></ol><p><img src="/p/5f3481/image-20221126174628271.png" alt="image-20221126174628271"></p><ol start="6"><li>选择git默认使用的编辑器，测试后，点击next</li></ol><p><img src="/p/5f3481/image-20221126174656214.png" alt="image-20221126174656214"></p><ol start="7"><li>确定新存储仓库初始化分支的名称，这里让git决定，点击next</li></ol><p><img src="/p/5f3481/image-20221126174704371.png" alt="image-20221126174704371"></p><ol start="8"><li>调整path环境变量，这里选择第二项，避免了对其他环境的污染，可以在Git Bash和Windows命令提示符中使用git，点击next</li></ol><p><img src="/p/5f3481/image-20221126174713773.png" alt="image-20221126174713773"></p><ol start="9"><li>这里选择绑定的OpenSSH，点击next</li></ol><p><img src="/p/5f3481/image-20221126174724964.png"></p><ol start="10"><li>选择HTTPS传输后端，点击next</li></ol><p><img src="/p/5f3481/image-20221126174736379.png" alt="image-20221126174736379"></p><ol start="11"><li>配置行结束符，点击next</li></ol><p><img src="/p/5f3481/image-20221126174750864.png" alt="image-20221126174750864"></p><ol start="12"><li>配置终端模拟器，点击next</li></ol><p><img src="/p/5f3481/image-20221126174758662.png" alt="image-20221126174758662"></p><ol start="13"><li>选择Git上传的默认行为，点击next</li></ol><p><img src="/p/5f3481/image-20221126174808011.png" alt="image-20221126174808011"></p><ol start="14"><li>选择Git凭证管理器，点击next</li></ol><p><img src="/p/5f3481/image-20221126174815664.png" alt="image-20221126174815664"></p><ol start="15"><li>选择额外选项配置，点击next</li></ol><p><img src="/p/5f3481/image-20221126174824190.png" alt="image-20221126174824190"></p><ol start="16"><li>实验选项配置，不要勾选，因为有bug，所以这里默认都不勾选，点击next</li></ol><p><img src="/p/5f3481/image-20221126174832894.png" alt="image-20221126174832894"></p><ol start="17"><li>取消勾选，点击next</li></ol><p><img src="/p/5f3481/image-20221126174842924.png" alt="image-20221126174842924"></p><h3 id="2-下载安装TortoiseGit"><a href="#2-下载安装TortoiseGit" class="headerlink" title="2. 下载安装TortoiseGit"></a>2. 下载安装TortoiseGit</h3><ol><li>官网下载地址：<a href="https://tortoisegit.org/download/">https://tortoisegit.org/download/</a></li></ol><p><img src="/p/5f3481/image-20221126183836246.png" alt="image-20221126183836246"></p><ol start="2"><li>将TortoiseGit安装包和TortoiseGit中文语言包下载完成后，先双击TortoiseGit安装包，点击next</li></ol><p><img src="/p/5f3481/image-20221126175732987.png" alt="image-20221126175732987"></p><ol start="3"><li>点击next，SSH客户端选择git默认SSH客户端，点击next</li></ol><p><img src="/p/5f3481/image-20221126175827163.png" alt="image-20221126175827163"></p><p><img src="/p/5f3481/image-20221126175842018.png" alt="image-20221126175842018"></p><ol start="4"><li>修改TortoiseGit的默认安装路径，点击next，然后点击install即可</li></ol><p><img src="/p/5f3481/image-20221126175849483.png" alt="image-20221126175849483"></p><p><img src="/p/5f3481/image-20221126175857584.png" alt="image-20221126175857584"></p><ol start="5"><li>取消勾选”Run first start wizard”，点击finish即可</li></ol><p><img src="/p/5f3481/image-20221126175903539.png" alt="image-20221126175903539"></p><ol start="6"><li>双击tortoiseGit语言安装包，点击下一步，勾选”Configure TortoiseGit to use this language”后，点击完成</li></ol><p><img src="/p/5f3481/image-20221126175928166.png" alt="image-20221126175928166"></p><p><img src="/p/5f3481/image-20221126175937283.png" alt="image-20221126175937283"></p><ol start="7"><li>右键单击，依次选择”tortoisegit”–&gt;”设置”，取消每周自动检查新版本，然后应用，点击确定</li></ol><p><img src="/p/5f3481/image-20221126175949773.png" alt="image-20221126175949773"></p><h3 id="3-下载安装nodejs，nodejs环境配置与hexo插件安装"><a href="#3-下载安装nodejs，nodejs环境配置与hexo插件安装" class="headerlink" title="3. 下载安装nodejs，nodejs环境配置与hexo插件安装"></a>3. 下载安装nodejs，nodejs环境配置与hexo插件安装</h3><p>在安装nodejs(版本18.12.1)时要注意权限问题，nodejs在安装后新建文件或文件夹时都需要管理员权限，为了避免npm全局包安装失败，给nodejs的程序安装目录提升权限即可(给everyone或当前登录用户添加完全控制权限即可)。</p><ol><li>官网下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li></ol><p><img src="/p/5f3481/image-20221126185821392.png" alt="image-20221126185821392"></p><ol start="2"><li>双击nodejs安装包，点击next，然后勾选同意协议，点击next</li></ol><p><img src="/p/5f3481/image-20221126180021773.png" alt="image-20221126180021773"></p><p><img src="/p/5f3481/image-20221126180033108.png" alt="image-20221126180033108"></p><ol start="3"><li>更改nodejs的默认安装路径，点击next，然后再次点击next</li></ol><p><img src="/p/5f3481/image-20221126190431393.png" alt="image-20221126190431393"></p><p><img src="/p/5f3481/image-20221126180046448.png" alt="image-20221126180046448"></p><ol start="4"><li>保持默认即可，不用勾选，点击next，然后点击install，安装完成后点击finish</li></ol><p><img src="/p/5f3481/image-20221126180052499.png" alt="image-20221126180052499"></p><p><img src="/p/5f3481/image-20221126180058434.png" alt="image-20221126180058434"></p><p><img src="/p/5f3481/image-20221126180105446.png" alt="image-20221126180105446"></p><ol start="5"><li>依次查看node与npm的安装版本以及npm全局安装默认文件夹</li></ol><p><img src="/p/5f3481/image-20221126180123821.png" alt="image-20221126180123821"></p><ol start="6"><li>nodejs安装完成后，检查权限，发现权限不够，需要提升权限，以everyone用户组为例，指定完全控制权限</li></ol><p><img src="/p/5f3481/image-20221126180130123.png" alt="image-20221126180130123"></p><p><img src="/p/5f3481/image-20221126180137136.png" alt="image-20221126180137136"></p><p><img src="/p/5f3481/image-20221126180146309.png" alt="image-20221126180146309"></p><ol start="7"><li>给everyone用户组指定完全控制权限后，创建文件或文件夹无需管理员权限也能成功</li></ol><p><img src="/p/5f3481/image-20221126180153618.png" alt="image-20221126180153618"></p><ol start="8"><li>在nodejs默认安装目录下新创建两个文件夹，<code>node_global</code>和<code>node_cache</code>，一个用来存放npm的全局安装包，一个用来存放nodejs安装npm包时产生的缓存</li></ol><p><img src="/p/5f3481/image-20221126180203343.png" alt="image-20221126180203343"></p><ol start="9"><li>以管理员身份打开Windows命令提示符cmd，然后执行如下两条命令，设置完成后通过<code>npm root -g</code>来查看npm全局安装包的默认安装位置是否设置成功，然后全局安装hexo相关插件(<code>npm install -g hexo-cli</code> 和<code>npm install -g npm</code>)，这里目前只需要全局安装<code>hexo-cli</code>即可</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;E:\Program Files\nodejs\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;E:\Program Files\nodejs\node_cache&quot;</span><br>npm root -g <span class="hljs-comment"># 查看npm全局安装包的默认安装位置</span><br>npm install -g hexo-cli <span class="hljs-comment"># 使用npm全局安装hexo-cli</span><br></code></pre></td></tr></table></figure><p><img src="/p/5f3481/image-20221126180243666.png" alt="image-20221126180243666"></p><ol start="10"><li>最后还要修改系统的环境变量，这里主要有两处需要修改：1、环境变量的用户变量；2、环境变量的系统变量</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、在用户环境变量下的path中，将默认的<span class="hljs-string">&quot;C:\Users\vain\AppData\Roaming\npm\&quot;修改为&quot;</span>E:\Program Files\nodejs\node_global<span class="hljs-string">&quot;，点击确定</span><br><span class="hljs-string">2、在系统变量中添加变量名为：NODE_PATH；变量值为：&quot;</span>E:\Program Files\nodejs\node_global\node_modules<span class="hljs-string">&quot;，点击确定</span><br><span class="hljs-string">3、在系统变量下的path中，将新创建的&quot;</span>NODE_PATH<span class="hljs-string">&quot;变量名前后加个%，变成&quot;</span>%NODE_PATH%<span class="hljs-string">&quot;添加到path中，点击确定</span><br></code></pre></td></tr></table></figure><h3 id="4-hexo博客的详细配置"><a href="#4-hexo博客的详细配置" class="headerlink" title="4. hexo博客的详细配置"></a>4. hexo博客的详细配置</h3><ol><li>修改git默认家目录</li></ol><p><img src="/p/5f3481/image-20221126214338538.png" alt="image-20221126214338538"></p><ol start="2"><li>修改git默认编辑器</li></ol><ul><li>可以在git中通过命令行打开Sublime Text、VSCode、Typora，进行博客md源文件的编写，这里以Sublime Text为例</li><li>若以sublime text为git的默认编辑器，首先应将sublime text.exe的安装目录放到环境变量中(可能需要重启)，其次执行命令：<code>git config --global core.editor &quot;sublime_text.exe -w&quot;</code>或<code>git config --global core.editor &quot;sublime_text.exe -w|1&quot;</code></li><li>若以VSCode为git的默认编辑器，可直接执行命令：<code>git config --global --replace core.editor &quot;code --wait&quot;</code></li><li>若以Typora为git的MD文件默认编辑器，可直接执行命令：<code>git config --global core.editor &quot;Typora.exe&quot;</code></li></ul><p><img src="/p/5f3481/image-20221126205746156.png" alt="image-20221126205746156"></p><ol start="3"><li>创建dkl-justdoit.github.io站点文件夹，在站点文件夹中右键git bash，git初始化</li></ol><p><img src="/p/5f3481/image-20221126203245381.png" alt="image-20221126203245381"></p><p><img src="/p/5f3481/image-20221126203746807.png" alt="image-20221126203746807"></p><ol start="4"><li>配置git全局用户信息<code>user.name</code>和<code>user.email</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">配置用户名和邮箱<br>git config --global user.name <span class="hljs-string">&quot;dkl-justdoit&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;vaincourtship@gmail.com&quot;</span><br><span class="hljs-comment"># 配置用户名和邮箱后会在.git同级目录下生成一个.gitconfig文件</span><br></code></pre></td></tr></table></figure><ol start="5"><li>修改.gitconfig配置文件信息</li></ol><p>使用<code>git config --global --list</code>查看全局配置信息，其实就是<code>.gitconfig</code>中的信息；</p><p><code>vim .gitconfig</code>，然后用下面的信息替换掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[user]<br>name = dkl-justdoit<br>email = vaincourtship@gmail.com<br>[credential]<br>  helper = store<br>[core]<br>editor = sublime_text.exe -w|1<br></code></pre></td></tr></table></figure><ol start="6"><li>给远程dkl-justdoit.github.io仓库指定别名，基于https协议和git协议</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v <span class="hljs-comment"># 查看所有远程仓库别名</span><br>git remote add origin https://github.com/dkl-justdoit/dkl-justdoit.github.io.git <span class="hljs-comment"># 给远程库添加别名，基于https协议</span><br>git remote add ssh_origin git@github.com:dkl-justdoit/dkl-justdoit.github.io.git <span class="hljs-comment"># 给远程库添加别名，基于git协议</span><br></code></pre></td></tr></table></figure><ol start="7"><li>将处理好的.ssh压缩包(.ssh密钥的生成这里不展开)解压到与.git同级目录中，执行<code>ssh -T git@github.com</code>，若返回信息为：<code>Hi dkl-justdoit! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>，说明已经完成ssh处理</li></ol><p><img src="/p/5f3481/image-20221126211945128.png" alt="image-20221126211945128"></p><ol start="8"><li>在站点文件夹dkl-justdoit.github.io中初始化博客站点，这里以hexo init blogs为例</li></ol><p><img src="/p/5f3481/image-20221126212340801.png" alt="image-20221126212340801"></p><ol start="9"><li>在blogs中本地安装hexo-deployer-git和hexo-renderer-marked插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <span class="hljs-comment"># 推送博客html/css/js文件到github</span><br>npm install hexo-renderer-marked --save <span class="hljs-comment"># 解决hexo与typora图片显示问题</span><br><br>以下几个不是在这里使用<br>npm install -g hexo-cli <span class="hljs-comment"># 这个已经安装过了</span><br>npm install -g npm <span class="hljs-comment"># 这个更新不更新其实都可以的</span><br>npm install hexo-generator-feed --save <span class="hljs-comment"># 为博客添加RSS订阅链接</span><br>npm install hexo-admin --save <span class="hljs-comment"># Hexo博客引擎的管理用户界面插件，最初是作为本地编辑器设计的，在本地运行hexo使用hexo-admin编写文章</span><br>npm install hexo-renderer-pug hexo-renderer-stylus --save <span class="hljs-comment"># butterfly主题需要，不然无法正常渲染展示</span><br></code></pre></td></tr></table></figure><p><img src="/p/5f3481/image-20221126213734001.png" alt="image-20221126213734001"></p><ol start="10"><li>修改站点根目录blogs下的配置文件<code>_config.yml</code>，刚开始只需要关注两点：博客想要使用的主题以及要推送到github的哪个仓库的哪个分支，其余可以暂时不管，可以等后续处理</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: hexo-theme-fluid <span class="hljs-comment"># 修改博客主题为fluid，我的博客的默认主题</span><br><span class="hljs-comment">#theme: hexo-theme-butterfly # butterfly主题可以使用但未启用</span><br><span class="hljs-comment">#theme: hexo-theme-volantis # volantis主题可以使用但未启用</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span> <span class="hljs-comment"># 类型为git</span><br>  <span class="hljs-comment">#repository: https://github.com/dkl-justdoit/dkl-justdoit.github.io.git # 使用https协议的url格式的仓库</span><br>  repository: git@github.com:dkl-justdoit/dkl-justdoit.github.io.git <span class="hljs-comment"># 使用git协议的url格式的仓库</span><br>  branch: main <span class="hljs-comment"># branch的值修改为main  </span><br></code></pre></td></tr></table></figure><ol start="11"><li>在blogs中通过git submodule子模块添加多主题，这里以fluid、butterfly、volantis为例，通过fork原作者的主题仓库来同步主题的更新，然后将主题的自定义修改推送到自己fork的主题仓库的fluid、butterfly、volantis分支，这样以后如果想要更新，进行分支的合并后更新即可，而dkl-justdoit.github.io仓库，只是用来作为blogs的更新推送，里面都是html、css和js文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash">=============================================================================================================<br><span class="hljs-built_in">cd</span> blogs <span class="hljs-comment"># 切换到blogs目录下</span><br>git submodule add git@github.com:dkl-justdoit/hexo-theme-fluid.git themes/hexo-theme-fluid<br>git submodule update --init --recursive<br><span class="hljs-built_in">cd</span> themes/hexo-theme-fluid/<br><br>git branch -v <span class="hljs-comment"># 查看本地分支</span><br>git branch fluid    <span class="hljs-comment"># 创建本地fluid主题分支</span><br>git checkout fluid  <span class="hljs-comment"># 切换到fluid本地主题分支</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;剥离主题fluid&#x27;</span><br>git push -u origin fluid <span class="hljs-comment"># 推送本地fluid主题分支到dkl-justdoit/hexo-theme-fluid.git/fluid，并进行关联追踪</span><br><br><span class="hljs-built_in">cd</span> blogs <span class="hljs-comment"># 切换到blogs目录下</span><br>hexo clean<br>hexo g<br>hexo d<br>hexo s<br>=============================================================================================================<br><span class="hljs-built_in">cd</span> blogs <span class="hljs-comment"># 切换到blogs目录下</span><br>git submodule add git@github.com:dkl-justdoit/hexo-theme-butterfly.git themes/hexo-theme-butterfly<br>git submodule update --init --recursive<br><span class="hljs-built_in">cd</span> themes/hexo-theme-butterfly/<br><br>git branch -v <span class="hljs-comment"># 查看本地分支</span><br>git branch butterfly   <span class="hljs-comment"># 创建本地butterfly主题分支</span><br>git checkout butterfly  <span class="hljs-comment"># 切换到butterfly本地主题分支</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;剥离主题butterfly&#x27;</span><br>git push -u origin butterfly <span class="hljs-comment"># 推送本地butterfly主题分支到dkl-justdoit/hexo-theme-butterfly.git/butterfly，并进行关联追踪</span><br><br><span class="hljs-built_in">cd</span> blogs <span class="hljs-comment"># 切换到blogs目录下</span><br>hexo clean<br>hexo g<br>hexo d<br>hexo s<br>=============================================================================================================<br><span class="hljs-built_in">cd</span> blogs <span class="hljs-comment"># 切换到blogs目录下</span><br>git submodule add git@github.com:dkl-justdoit/hexo-theme-volantis.git themes/hexo-theme-volantis<br>git submodule update --init --recursive<br><span class="hljs-built_in">cd</span> themes/hexo-theme-volantis/<br><br>git branch -v <span class="hljs-comment"># 查看本地分支</span><br>git branch volantis   <span class="hljs-comment"># 创建本地volantis主题分支</span><br>git checkout volantis  <span class="hljs-comment"># 切换到volantis本地主题分支</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;剥离主题volantis&#x27;</span><br>git push -u origin volantis <span class="hljs-comment"># 推送本地volantis主题分支到dkl-justdoit/hexo-theme-volantis.git/volantis，并进行关联追踪</span><br><br><span class="hljs-built_in">cd</span> blogs <span class="hljs-comment"># 切换到blogs目录下</span><br>hexo clean<br>hexo g<br>hexo d<br>hexo s<br>==============================================================================================================<br>总结：这里以fluid、butterfly、volantis为例，通过fork原作者的主题仓库来同步主题的更新，然后将主题的自定义修改推送到自己fork的主题仓库的fluid、butterfly、volantis分支，这样以后如果想要更新，进行分支的合并后更新即可，而dkl-justdoit.github.io仓库，只是用来作为blogs的更新推送，里面都是html、css和js文件。<br></code></pre></td></tr></table></figure><ol start="12"><li>修改站点根目录下配置文件中的主题相关字段，依次启用hexo-theme-fluid、hexo-theme-butterfly、hexo-theme-volantis进行测试，启用后记得保存_config.yml文件，然后依次执行hexo clean，hexo g，hexo d推送博客文件到github pages。其中，fluid和volantis可以正常展示，但是butterfly会报一个错误(可以解决)，需要注意</li></ol><p><img src="/p/5f3481/image-20221127112125750.png" alt="image-20221127112125750"></p><ul><li>butterfly主题报错如下，需要在blogs目录下执行：<code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code>，然后重新执行hexo clean，hexo g，hexo d推送博客文件到github pages即可</li></ul><p><img src="/p/5f3481/image-20221127121759509.png" alt="image-20221127121759509"></p><ol start="13"><li>基于hexo的博客，通过typora编辑MD文件，插入图片后typora本地是能正常展示的，但是发布到github pages上就展示不了了，主要的原因还是路径的问题，当然hexo官网也给了解决的办法，但是在本地使用很不方便，所以这里借助hexo-renderer-marked插件来解决这个问题，但也需要在hexo-renderer-marked插件中添加关于图片路径处理的代码，具体如下：</li></ol><ul><li>首先引用 hexo-renderer-marked 包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-renderer-marked --save <span class="hljs-comment"># 在blogs目录中</span><br></code></pre></td></tr></table></figure><ul><li>然后修改_config.yml文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">post_asset_folder: <span class="hljs-literal">true</span><br>marked:<br>    prependRoot: <span class="hljs-literal">true</span><br>    postAsset: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>开启了之后，图片资源就会自动解析成对应的图片路径。比如：“LINUX.jpg” 位于 “&#x2F;2022&#x2F;10&#x2F;11&#x2F;LINUX&#x2F;LINUX.jpg”</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">![](LINUX.jpg)` 将会转换成 `&lt;img src=<span class="hljs-string">&quot;/2022/10/11/LINUX/LINUX.jpg&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>这种方式，虽然能解决发布之后图片展示的问题，但是不能解决本地typora编辑的问题，例如，有如下的目录结构：</p><p><img src="/p/5f3481/image-20221127181937572.png" alt="image-20221127181937572"></p><p>编辑<code>tcpdump和wireshark工具-网络排障.md</code>文件，如果写成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">![image-20221001134526709](tcpdump和wireshark工具-网络排障/image-20221001134526709.jpg)<br></code></pre></td></tr></table></figure><p>这种相对路径之后，能在typora中显示图片，但是在网页上就不能展示图片，如果改成下面这种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">![image-20221001134526709](image-20221001134526709.jpg)<br></code></pre></td></tr></table></figure><p>能在网页上显示图片，但是在typora中又不能显示，这个时候，我们就通过修改插件 hexo-renderer-marked 的代码，来兼容两方的需求，找到图片路径转换的代码：</p><p><img src="/p/5f3481/image-20221127180716090.png" alt="image-20221127180716090"></p><ul><li>在<code>node_modules/hexo-renderer-marked/lib/renderer.js</code>中查找<code>image(href, title, text)</code>；</li><li>在 <code>const &#123; hexo, options &#125; = this; const &#123; relative_link &#125; = hexo.config; const &#123; lazyload, prependRoot, postPath &#125; = options;</code>前面插入如下代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//console.log(0,href);</span><br><span class="hljs-keyword">if</span>(href.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>)&gt;-<span class="hljs-number">1</span>)&#123;<br>      href = href.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">1</span>];<br>    &#125;<br></code></pre></td></tr></table></figure><p>其中红框中的代码就是新加的，这样我们在md文件中，路径写成：<code>tcpdump和wireshark工具-网络排障/image-20221001134526709.jpg</code>这样，就能同时在typora和网页上进行展示。</p><ul><li>使用hexo clean、hexo g、hexo s查看没有问题后再使用hexo d推送到GitHub上，至此hexo + typora + sublime text  + github 博客搭建已经初步完成，后期可以继续完善博客功能。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo s<br><span class="hljs-comment"># 查看没有问题后再推送</span><br>hexo d<br><span class="hljs-comment"># 使用hexo-renderer-marked插件，typora在本地写文章插入图片后，可以在本地正常显示，同样发布到dkl-justdoit.github.io后也能在网页正常显示</span><br><span class="hljs-comment"># 推送完成后，可以打开url，测试功能是否成功实现</span><br></code></pre></td></tr></table></figure><h3 id="5-hexo博客搭建过程中的注意事项"><a href="#5-hexo博客搭建过程中的注意事项" class="headerlink" title="5. hexo博客搭建过程中的注意事项"></a>5. hexo博客搭建过程中的注意事项</h3><ol><li>一定要先安装Git和TortoiseGit，再安装nodejs</li></ol><p>原因是如果先配置nodejs环境，再安装git会导致npm root -g的存储路径恢复成默认的位置，不便于管理。</p><ol start="2"><li>在设置完nodejs的环境变量等配置后建议安装全局包前使用npm root -g确定是否是你想要存储的位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">最好在Windows命令提示符cmd中(管理员运行)执行<br>npm install -g hexo-cli <span class="hljs-comment"># hexo博客必须要安装的全局包</span><br>npm install -g npm <span class="hljs-comment"># 安装最新的npm包到自定义的全局包的位置</span><br></code></pre></td></tr></table></figure><ol start="3"><li>除了必要的npm全局包外，安装局部npm包都需要在需要的、指定的目录下进行局部安装，且只能在该目录下使用，不能像全局包一样添加到环境变量中，可以到处使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <span class="hljs-comment"># 若有blogs目录，则在blogs目录下安装即可；若无，直接在dkl-justdoit.github.io目录下安装即可</span><br>npm install hexo-renderer-marked --save <span class="hljs-comment"># 同上</span><br>npm install hexo-generator-feed --save <span class="hljs-comment"># 同上</span><br>npm install hexo-admin --save <span class="hljs-comment"># 同上</span><br>npm install hexo-renderer-pug hexo-renderer-stylus --save <span class="hljs-comment"># 如果butterfly主题不能在网页显示，而是报错，这两个插件就需要安装</span><br></code></pre></td></tr></table></figure><ol start="4"><li>将hexo博客的源文件推送到了dkl-justdoit.github.io仓库的hexo-source分支；将hexo博客生成的网页代码推送到了dkl-justdoit.github.io仓库的main分支(默认分支)</li></ol><ul><li>提交源码到hexo-source分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">根目录下(dkl-justdoit.github.io)<br>git add .<br>git commit -m <span class="hljs-string">&#x27;注释信息&#x27;</span><br>git push -u ssh_origin hexo-source<br>提交源码到hexo-source分支<br></code></pre></td></tr></table></figure><ul><li>默认提交网页代码到main分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">根目录下(blogs)<br>hexo clean<br>hexo g<br>hexo d<br>默认提交网页代码到main分支<br></code></pre></td></tr></table></figure><h3 id="6-打完收工"><a href="#6-打完收工" class="headerlink" title="6. 打完收工"></a>6. 打完收工</h3><p>如果只想使用原主题，不需要继续进行主题的优化，那么就开始写博客吧！！！</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>VSCode</tag>
      
      <tag>Sublime Text</tag>
      
      <tag>Typora</tag>
      
      <tag>博客搭建</tag>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git中修改默认编辑器为VSCode、Sublime Text或Typora</title>
    <link href="/p/fa6b5160.html"/>
    <url>/p/fa6b5160.html</url>
    
    <content type="html"><![CDATA[<h1 id="git中修改默认编辑器"><a href="#git中修改默认编辑器" class="headerlink" title="git中修改默认编辑器"></a>git中修改默认编辑器</h1><h2 id="1-将git默认编辑器修改为VSCode"><a href="#1-将git默认编辑器修改为VSCode" class="headerlink" title="1. 将git默认编辑器修改为VSCode"></a>1. 将git默认编辑器修改为VSCode</h2><p>右键git bash，修改git默认编辑器，操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --replace core.editor <span class="hljs-string">&quot;code --wait&quot;</span> <span class="hljs-comment"># 这个已经测试过了，可以使用(其实不修改也可以直接使用&quot;code .&quot;来打开当前文件夹)</span><br>git config --global core.editor <span class="hljs-string">&quot;code --wait&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-将git默认编辑器修改为Sublime-Text-4"><a href="#2-将git默认编辑器修改为Sublime-Text-4" class="headerlink" title="2. 将git默认编辑器修改为Sublime Text 4"></a>2. 将git默认编辑器修改为Sublime Text 4</h2><ol><li>首先确定sublime text 4 的安装路径，我的这台电脑的sublime text 完整路径为：<code>D:\Program Files\Sublime Text\sublime_text.exe</code>，为了能够在git bash命令行中使用sublime_text.exe，所以需要将<code>D:\Program Files\Sublime Text</code>放入环境变量的系统变量中。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">注：这里一定要注意是<span class="hljs-string">&quot;D:\Program Files\Sublime Text&quot;</span>而不是<span class="hljs-string">&quot;D:\Program Files\Sublime Text\&quot;，多了一个反斜杠和少了一个反斜杠在Windows11系统中有很大区别。</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将sublime text 4的安装路径<code>D:\Program Files\Sublime Text</code>放到环境变量中(可能要重启系统)。</li><li>打开git，设置 sublime text 为默认的编辑器， 使用如下命令。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.editor <span class="hljs-string">&quot;sublime_text.exe -w&quot;</span><br>git config --global core.editor <span class="hljs-string">&quot;sublime_text.exe -w|1&quot;</span><br></code></pre></td></tr></table></figure><p>此处注意：如果路径中有空格， 类unix及Linux系统中需要用单引号括起来，而Windows系统中需要使用双引号括起来。<br>-w : ask git to wait for you to finish typing the message in the text editor<br>l1 : tell git to start at line one, put the cursor at line one</p><ol start="4"><li>验证有没有效果：<code>git commit -a</code>， 之后 sublime text 会被打开，同时一个名为 COMMIT_EDITMSG 文件也会被打开。但输入完成后必须关闭 sublime text，否则 git 无法完成提交。</li></ol><h2 id="3-将git默认编辑器修改为Typora"><a href="#3-将git默认编辑器修改为Typora" class="headerlink" title="3. 将git默认编辑器修改为Typora"></a>3. 将git默认编辑器修改为Typora</h2><ol><li>首先确定Typora 的安装路径，我的这台电脑的Typora完整路径为：<code>D:\Program Files\Typora\Typora.exe</code>，为了能够在git bash命令行中使用Typora.exe，所以需要将<code>D:\Program Files\Typora</code>放入环境变量的系统变量中。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">注：这里一定要注意是<span class="hljs-string">&quot;D:\Program Files\Typora&quot;</span>而不是<span class="hljs-string">&quot;D:\Program Files\Typora\&quot;，多了一个反斜杠和少了一个反斜杠在Windows11系统中有很大区别。</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将Typora的安装路径<code>D:\Program Files\Typora</code>放到环境变量中(可能要重启系统)。</li><li>打开git，设置 Typora为默认的编辑器， 使用如下命令。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.editor <span class="hljs-string">&quot;Typora.exe&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>文本编辑器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>Sublime Text</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客多端同步问题</title>
    <link href="/p/49fa2569.html"/>
    <url>/p/49fa2569.html</url>
    
    <content type="html"><![CDATA[<h1 id="HEXO-博客多端同步问题"><a href="#HEXO-博客多端同步问题" class="headerlink" title="HEXO 博客多端同步问题"></a>HEXO 博客多端同步问题</h1><p>搭完博客，想在不同电脑上更新博客就会出现博客内容不同步的问题，而且到处拷贝文件费时费力，因此就把博客源码放到GitHub，通过Git工具进行多终端的同步。</p><p>前提条件：1、首先完成git和node的安装以及环境搭建。2、使用npm工具<code>全局安装hexo-cli</code>。</p><h2 id="1-通过-git-工具实现-HEXO-博客源文件同步"><a href="#1-通过-git-工具实现-HEXO-博客源文件同步" class="headerlink" title="1. 通过 git 工具实现 HEXO 博客源文件同步"></a>1. 通过 git 工具实现 HEXO 博客源文件同步</h2><p>在博客根目录执行，<code>思考如下</code>：由于将博客源码都上传到Github的hexo-source分支。</p><ul><li>第一种思路：如果能够直接克隆远程库指定分支，直接克隆就能将博客源文件同步到本地库，完成博客更新后提交所有文件到远端仓库即可。</li><li>第二种思路：搭建一个与其他电脑上一样的环境也能实现，然后拉取远程仓库指定分支到本地库，同样地，完成博客更新后提交所有文件到远端仓库即可。</li></ul><h3 id="1-1-第一种思路实现过程"><a href="#1-1-第一种思路实现过程" class="headerlink" title="1.1 第一种思路实现过程"></a>1.1 第一种思路实现过程</h3><ol><li>先使用npm工具全局安装hexo-cli，最好使用cmd(管理员)执行该命令</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g  <span class="hljs-comment"># 先使用npm工具全局安装hexo-cli，最好使用cmd(管理员)执行该命令</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用Git clone命令进行博客源文件的同步，具体如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:dkl-justdoit/dkl-justdoit.github.io.git <span class="hljs-comment"># 默认情况下，git clone会将远程仓库的默认分支上的文件拉取到本地仓库</span><br>git <span class="hljs-built_in">clone</span> -b hexo-source git@github.com:dkl-justdoit/dkl-justdoit.github.io.git <span class="hljs-comment"># 通过-b参数可以自行指定要拉取远程库的哪个分支；通过这种方式在本地创建该分支的文件夹，且只包含该远程仓库的该分支下所有文件，其他分支文件不会包含；而且克隆后本地只有这一个分支。</span><br><span class="hljs-comment">##############################################################################################################</span><br>在每次写完文章并完成博客更新后，还要将所有博客源文件推送到远端仓库，在dkl-justdoit.github.io目录下操作如下：<br>git add .  <span class="hljs-comment"># 所有变化提交到暂存区</span><br>git commit -m <span class="hljs-string">&quot;新发布xxx文章，已同步&quot;</span>  <span class="hljs-comment"># 提交文件，-m可添加注释信息</span><br>git push ssh_origin hexo-source   <span class="hljs-comment"># 推送博客源文件到hexo-source分支</span><br></code></pre></td></tr></table></figure><h3 id="1-2-第二种思路实现过程"><a href="#1-2-第二种思路实现过程" class="headerlink" title="1.2 第二种思路实现过程"></a>1.2 第二种思路实现过程</h3><ol><li>先使用npm工具全局安装hexo-cli，最好使用cmd(管理员)执行该命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g  <span class="hljs-comment"># 先使用npm工具全局安装hexo-cli，最好使用cmd(管理员)执行该命令</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在D盘下新建一个文件夹，名为dkl-justdoit.github.io。</li></ol><p><img src="/p/49fa2569/image-20221122142507417.png" alt="image-20221122142507417"></p><ol start="3"><li>进入dkl-justdoit.github.io文件夹，右键打开Git Bash，初始化后依次进行如下操作。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init   <span class="hljs-comment"># git初始化</span><br>git remote add ssh_origin git@github.com:dkl-justdoit/dkl-justdoit.github.io.git  <span class="hljs-comment"># 添加远程仓库，注意这里要添加你自己的仓库</span><br>git fetch ssh_origin hexo-source <span class="hljs-comment"># hexo-source为远程仓库想要拉取分支的分支名(如果是默认main就无需这么麻烦，直接git clone即可)；把远程分支拉取到本地</span><br>git checkout -b hexo-source ssh_origin/hexo-source <span class="hljs-comment"># 在本地新建hexo-source分支并切换到该分支，且将本地新建的该分支与远程库中的hexo-source分支关联起来</span><br>git pull ssh_origin hexo-source(远程库分支名) <span class="hljs-comment"># 把远程分支上的内容拉取到本地</span><br><span class="hljs-comment">##############################################################################################################</span><br>上面的过程可以简化，具体如下：<br>git init   <span class="hljs-comment"># git初始化</span><br>git remote add ssh_origin git@github.com:dkl-justdoit/dkl-justdoit.github.io.git  <span class="hljs-comment"># 添加远程仓库，注意这里要添加你自己的仓库</span><br>git pull ssh_origin hexo-source(远程库分支名) <span class="hljs-comment"># 把远程分支上的内容拉取到本地</span><br><span class="hljs-comment">##############################################################################################################</span><br>在每次写完文章并完成博客更新后，还要将所有博客源文件推送到远端仓库，在dkl-justdoit.github.io目录下操作如下：<br>git add .  <span class="hljs-comment"># 所有变化提交到暂存区</span><br>git commit -m <span class="hljs-string">&quot;新发布xxx文章，已同步&quot;</span>  <span class="hljs-comment"># 提交文件，-m可添加注释信息</span><br>git push ssh_origin hexo-source   <span class="hljs-comment"># 推送博客源文件到hexo-source分支</span><br></code></pre></td></tr></table></figure><ol start="3"><li>切换到dkl-justdoit.github.io文件夹查看，会发现已经完成了远程分支到本地的拉取，完成博客更新后提交所有文件到远端仓库即可，这样Github上就完成了博客源文件的更新，实现了HEXO博客的多端同步。</li></ol><h2 id="2-通过-git-submodule-实现-HEXO-第三方主题同步"><a href="#2-通过-git-submodule-实现-HEXO-第三方主题同步" class="headerlink" title="2. 通过 git submodule 实现 HEXO 第三方主题同步"></a>2. 通过 git submodule 实现 HEXO 第三方主题同步</h2><ol><li>之前的博客已经通过<code>git submodule</code>实现了<code>fluid/butterfly/volantis</code>三种主题的同步更新，对于多主体共存，个人理解如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">多主题共存，不是将主题推送到 git@github.com:dkl-justdoit/dkl-justdoit.github.io.git ，而是推送到 git@github.com:dkl-justdoit/hexo-theme-fluid.git 、 git@github.com:dkl-justdoit/hexo-theme-butterfly.git 或 git@github.com:dkl-justdoit/hexo-theme-volantis.git 对应的远程仓库。<br>因此，所有修改过后的主题是保存到对应主题仓库下的[主题名]分支(以fluid为例，是保存到 git@github.com:dkl-justdoit/hexo-theme-fluid.git 仓库的fluid分支上。)所以，针对多主题共存，需要在本地仓库的主题目录中新创建分支，然后再推送到远程库并关联追踪。<br></code></pre></td></tr></table></figure><ol start="2"><li>博客根目录下的.gitmodules文件中保存了远程库项目URL与本地仓库中对应目录的映射关系。</li><li>切换到blog目录下，执行如下操作即可完成同步。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">在blog目录下<br>git submodule update --init --recursive <span class="hljs-comment"># 拉取子模块并初始化本配置文件</span><br>hexo clean <span class="hljs-comment"># 清除hexo生成html缓存文件</span><br>hexo g <span class="hljs-comment"># 重新生成html缓存文件</span><br>hexo d <span class="hljs-comment"># 将生成的博客html推送到dkl-justdoit.github.io的默认分支(main分支)</span><br>hexo s <span class="hljs-comment"># 开启hexo服务，可以通过localhost:4000来进行博客预览</span><br></code></pre></td></tr></table></figure><ol start="4"><li>如果第三方主题配置进行了修改，修改完成后需要进行如下操作。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> themes/hexo-theme-volantis/ <span class="hljs-comment"># 进入第三方主题所在目录</span><br>git branch volantis   <span class="hljs-comment"># 创建本地volantis主题分支</span><br>git checkout volantis  <span class="hljs-comment"># 切换到volantis本地主题分支</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;剥离主题volantis&#x27;</span> <span class="hljs-comment"># 提交文件，并添加提交的注释信息</span><br>git push -u origin volantis <span class="hljs-comment"># 推送本地volantis主题分支到dkl-justdoit/hexo-theme-volantis.git/volantis，并进行关联追踪</span><br><span class="hljs-comment">#&quot;git push -u origin volantis&quot;中的-u参数，第一次推送时需要添加，因为要将本地分支与远端仓库的对应分支关联起来，这样就能将修改过的第三方主题推送到自己远端主题仓库的对应分支上，从而实现多端同步。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql8.0及以上数据库安装过程[windows]</title>
    <link href="/p/8006d41b.html"/>
    <url>/p/8006d41b.html</url>
    
    <content type="html"><![CDATA[<h1 id="mysql8-0及以上数据库安装过程-windows"><a href="#mysql8-0及以上数据库安装过程-windows" class="headerlink" title="mysql8.0及以上数据库安装过程[windows]"></a>mysql8.0及以上数据库安装过程[windows]</h1><h2 id="1、官网下载安装包"><a href="#1、官网下载安装包" class="headerlink" title="1、官网下载安装包"></a>1、官网下载安装包</h2><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><img src="/p/8006d41b/image-20221113131938539.png" alt="image-20221113131938539"></p><h2 id="2、解压安装包到本地磁盘"><a href="#2、解压安装包到本地磁盘" class="headerlink" title="2、解压安装包到本地磁盘"></a>2、解压安装包到本地磁盘</h2><p><img src="/p/8006d41b/image-20221123093557059.png" alt="image-20221123093557059"></p><p><img src="/p/8006d41b/image-20221123093840348.png" alt="image-20221123093840348"></p><p><code>注意：这里需要创建my.ini配置文件，但是data文件夹不需要手工创建，因为在下面会自动创建data文件夹。</code></p><h2 id="3、创建my-ini配置文件"><a href="#3、创建my-ini配置文件" class="headerlink" title="3、创建my.ini配置文件"></a>3、创建my.ini配置文件</h2><ul><li>编码格式为UTF-8，不是UTF-8 with BOM</li></ul><h2 id="4、配置my-ini文件，修改指定位置内容"><a href="#4、配置my-ini文件，修改指定位置内容" class="headerlink" title="4、配置my.ini文件，修改指定位置内容"></a>4、配置my.ini文件，修改指定位置内容</h2><ul><li>重点关注三个参数：basedir、lc-messages-dir、datadir</li><li>把<code>D:\\ENVIRONMENTS\\mysql-8.0.28</code>替换为<code>mysql中bin的上一级目录</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment"># 必看说明：！！！</span><br><span class="hljs-comment"># 1. 此代码中所有#开头的句子都可以删除</span><br><span class="hljs-comment"># 2. 此代码中全部使用双\\，以防转义字符出现问题</span><br><span class="hljs-comment"># 设置 3306 端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置 mysql 的安装目录</span><br><span class="hljs-attr">basedir</span>=D:\\ENVIRONMENTS\\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">28</span><br><span class="hljs-comment"># 设置错误信息存放目录，一定注意找到对应的&quot;english&quot;文件夹！！</span><br><span class="hljs-attr">lc-messages-dir</span>=D:\\ENVIRONMENTS\\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">28</span>\\share\\english<br><span class="hljs-comment"># 设置 mysql 数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=D:\\ENVIRONMENTS\\mysql-<span class="hljs-number">8.0</span>.<span class="hljs-number">28</span>\\data<br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-comment"># 服务端使用的字符集默认为 UTF8</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置 mysql 客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-section">[client]</span><br><span class="hljs-comment"># 设置 mysql 客户端连接服务端时默认使用的端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-comment">#[WinMySQLAdmin]</span><br><span class="hljs-comment">#Server=D:\ENVIRONMENTS\mysql-8.0.28\bin\mysqld.exe</span><br><span class="hljs-comment">#设置将mysql的服务添加到注册表中，反正我当时没加这句话初始化有问题，目录照猫画虎，单双杠自己选</span><br><span class="hljs-comment">#关于3306端口没什么好说的，MySQL默认端口可能会被占用，修改端口即可。</span><br></code></pre></td></tr></table></figure><h2 id="5、配置环境变量"><a href="#5、配置环境变量" class="headerlink" title="5、配置环境变量"></a>5、配置环境变量</h2><ul><li><code>把mysql的bin目录加到环境变量--&gt;系统变量的path路径中</code></li><li><code>在系统变量中新建：变量名为MYSQL_PATH；变量值为D:\ENVIRONMENTS\mysql-8.0.28\bin</code></li><li><code>在系统变量的path变量中，新建：%MYSQL_PATH%</code></li><li>完成后依次确定即可</li></ul><p><img src="/p/8006d41b/image-20221123094615130.png" alt="image-20221123094615130"></p><h2 id="6、初始化mysql环境配置"><a href="#6、初始化mysql环境配置" class="headerlink" title="6、初始化mysql环境配置"></a>6、初始化mysql环境配置</h2><ul><li><p>输入cmd，以管理员身份运行</p></li><li><pre><code class="mysql">依次输入以下命令：mysqld --initialize-insecure #创建data文件夹mysqld --defaults-file=D:\ENVIRONMENTS\mysql-8.0.28\my.ini --initialize -console #初始化(这里的路径改成自己的安装路径)mysqld install #安装服务，正确会显示“Service successfully installed.”mysqld --initialize-insecure --user=mysql #创建root用户net start mysql #启动服务，会显示“mysql服务正在启动.”，启动成功会显示“mysql服务已经启动成功。”mysqladmin -u root -p password 123456 #设置root账号的密码，回车后可以直接回车，因为默认root账号密码为空，所以虽然修改密码需要密码，但是可以直接回车校验，因为默认密码为空(密码可改可不改)mysql -u root -p #验证账户，回车后输入前面修改的root密码即可，然后回车看到welcome欢迎信息即证明登录成功。# 通过以上操作，就得到了一组管理员账号和密码，管理员账号是root，对应的管理员密码是123456</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo多主题共存(以fluid、volantis、butterfly为例)</title>
    <link href="/p/9ca71dc6.html"/>
    <url>/p/9ca71dc6.html</url>
    
    <content type="html"><![CDATA[<h1 id="hexo多主题共存-以fluid、volantis、butterfly为例"><a href="#hexo多主题共存-以fluid、volantis、butterfly为例" class="headerlink" title="hexo多主题共存(以fluid、volantis、butterfly为例)"></a>hexo多主题共存(以fluid、volantis、butterfly为例)</h1><h2 id="1-主题文件没有改动过的情况"><a href="#1-主题文件没有改动过的情况" class="headerlink" title="1. 主题文件没有改动过的情况"></a>1. 主题文件没有改动过的情况</h2><p>由于主题都是直接clone原来的主题作者的，所以操作起来相对简单一些，这里以fluid主题为例。</p><h3 id="1-建立-fluid-主题子模块"><a href="#1-建立-fluid-主题子模块" class="headerlink" title="1. 建立 fluid 主题子模块"></a>1. 建立 fluid 主题子模块</h3><p>考虑到在博客创建伊始，便在站点根目录下创建了blogs这个专门用来单独存放博客相关文件的文件夹，所以这里也以这种情况为例进行说明。</p><p><code>git submodule add &lt;主题的git地址&gt; themes/&lt;主题名字&gt;</code></p><p>需要注意的是：此时的<code>主题的git地址</code>和<code>主题文件改动过的情况</code>有着很大的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">切换到blogs目录下<br>git submodule add git@github.com:fluid-dev/hexo-theme-fluid.git themes/hexo-theme-fluid <span class="hljs-comment"># 这里的fluid主题仓库是原作者的</span><br></code></pre></td></tr></table></figure><p>添加完之后 会在主git目录下面生成一个.gitmoudles文件(blogs目录外，与blogs目录同级)</p><h3 id="2-获得主题-fluid-文件"><a href="#2-获得主题-fluid-文件" class="headerlink" title="2. 获得主题 fluid 文件"></a>2. 获得主题 fluid 文件</h3><p>在本地站点建立了fluid主题子模块后，主题文件并不会自动clone到对应的目录，想要clone到本地，还需要在博客的主题目录的上一级目录blogs目录中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --init --recursive <span class="hljs-comment"># 拉取子模块并初始化本配置文件</span><br></code></pre></td></tr></table></figure><p>此时主题就会下载到对应的目录，以fluid为例，就是下载到blogs&#x2F;themes&#x2F;hexo-theme-fluid&#x2F;文件夹中。</p><h3 id="3-更新主题-fluid-文件"><a href="#3-更新主题-fluid-文件" class="headerlink" title="3. 更新主题 fluid 文件"></a>3. 更新主题 fluid 文件</h3><p>这样下次更新主题文件就直接在blogs文件夹中执行更新命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update<br></code></pre></td></tr></table></figure><h3 id="4-备份-fluid-主题的配置文件"><a href="#4-备份-fluid-主题的配置文件" class="headerlink" title="4. 备份 fluid 主题的配置文件"></a>4. 备份 fluid 主题的配置文件</h3><p>考虑到该主题不可能只用一次，所以需要将主题的配置文件进行备份，尤其是在已经修改过配置，适配自己博客的情况下。由于除了必要的改动，几乎没有改动配置文件的其他地方，因此只需备份fluid的主题配置文件即可，其路径：<code>D:\BLOGS\blogs\themes\hexo-theme-fluid\_config.yml</code>。</p><h3 id="5-删除与-fluid-主题相关的文件及配置"><a href="#5-删除与-fluid-主题相关的文件及配置" class="headerlink" title="5. 删除与 fluid 主题相关的文件及配置"></a>5. 删除与 fluid 主题相关的文件及配置</h3><p>删除任何文件之前，都需要搞清楚一件事，这个文件&#x2F;文件夹在下载或者更新的时候，都产生了哪些文件&#x2F;文件夹，只有知道了产生了哪些东西，才能知道我们要删除哪些东西。以fluid为例，主要是删除blogs&#x2F;themes&#x2F;hexo-theme-fluid&#x2F;这个文件夹，除此之外，还要删除.gitmodules文件中与fluid对应的信息。</p><h3 id="6-恢复主题-fluid-文件"><a href="#6-恢复主题-fluid-文件" class="headerlink" title="6. 恢复主题 fluid 文件"></a>6. 恢复主题 fluid 文件</h3><p>把第1、2、3步走一遍，然后将主题文件夹中主题配置文件替换成备份的fluid主题配置文件即可。</p><h2 id="2-主题文件DIY过的情况"><a href="#2-主题文件DIY过的情况" class="headerlink" title="2. 主题文件DIY过的情况"></a>2. 主题文件DIY过的情况</h2><p>前面的主题配置文件几乎没有更改过，思路理顺以后，下面这个更改过的主题配置文件会更简单，因为思路是相同的，只不过是配置起来麻烦些，这里仍以fluid主题为例。</p><h3 id="1-fork-喜欢的主题源代码并建立-fluid-主题子模块"><a href="#1-fork-喜欢的主题源代码并建立-fluid-主题子模块" class="headerlink" title="1. fork 喜欢的主题源代码并建立 fluid 主题子模块"></a>1. fork 喜欢的主题源代码并建立 fluid 主题子模块</h3><p>考虑到在博客创建伊始，便在站点根目录下创建了blogs这个专门用来单独存放博客相关文件的文件夹，所以这里同样以这种情况为例进行说明。</p><p>另外，在本地仓库中建立fluid主题子模块之前，需要登录github账号，打开<code>git@github.com:fluid-dev/hexo-theme-fluid.git</code>原作者的仓库页面，点击fork，复制一份主题源文件到自己仓库并取相同的名称<code>hexo-theme-fluid</code>，因为下面的操作都是在自己仓库中进行的，这样自己对该主题配置文件的修改才能保存到github，且主题原作者更新主题后，还能在自己仓库中与更新后的主题进行合并。</p><p><code>git submodule add &lt;自己fork的主题仓库的git地址&gt; themes/&lt;主题名字&gt;</code></p><p>需要注意的是：此时的<code>主题的git地址</code>和<code>主题文件没有改动过的情况</code>有着很大的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">切换到blogs目录下<br>git submodule add git@github.com:dkl-justdoit/hexo-theme-fluid.git themes/hexo-theme-fluid <span class="hljs-comment"># 这里的fluid主题仓库是自己的主题仓库，fork原作者的</span><br></code></pre></td></tr></table></figure><p>添加完之后 会在主git目录下面生成一个.gitmoudles文件(blogs目录外，与blogs目录同级)</p><h3 id="2-获得主题-fluid-文件并推送更改后的主题文件到远端仓库的指定分支"><a href="#2-获得主题-fluid-文件并推送更改后的主题文件到远端仓库的指定分支" class="headerlink" title="2. 获得主题 fluid 文件并推送更改后的主题文件到远端仓库的指定分支"></a>2. 获得主题 fluid 文件并推送更改后的主题文件到远端仓库的指定分支</h3><p>在本地站点建立了fluid主题子模块后，主题文件并不会自动clone到对应的目录，想要clone到本地，还需要在博客的主题目录的上一级目录blogs目录中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">切换到blog目录下<br>git submodule update --init --recursive <span class="hljs-comment"># 拉取子模块并初始化本配置文件</span><br></code></pre></td></tr></table></figure><p>此时主题就会下载到对应的目录，以fluid为例，就是下载到blogs&#x2F;themes&#x2F;hexo-theme-fluid&#x2F;文件夹中，然后就可以依据自己的喜好来修改主题配置文件。</p><p>修改完成后，下面将切换到主题fluid文件夹内，将所有fluid的主题文件通过git工具推送到远端仓库<code>hexo-theme-fluid</code>的<code>fluid分支</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> themes/hexo-theme-fluid/ <span class="hljs-comment"># 进入主题文件目录</span><br><br>git branch fluid    <span class="hljs-comment"># 创建本地fluid主题分支</span><br>git checkout fluid  <span class="hljs-comment"># 切换到fluid本地主题分支</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;剥离主题fluid&#x27;</span><br>git push -u ssh_origin fluid <span class="hljs-comment"># 推送本地fluid主题分支到dkl-justdoit/hexo-theme-fluid.git/fluid分支，并进行关联追踪</span><br><span class="hljs-comment"># 然后在自己的分支上面跟随原主题作者的更新 处理合并 生成的时候直接pull到本地就行</span><br></code></pre></td></tr></table></figure><p>下面可以通过两方面来进行验证，一方面是hexo博客，因为它使用了fluid主题；另一方面是<code>git@github.com:dkl-justdoit/hexo-theme-fluid.git</code>，因为将修改过后的所有fluid主题文件都推送到了<code>dkl-justdoit/hexo-theme-fluid.git/fluid分支</code>上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">切换到blog目录下<br>hexo clean<br>hexo g<br>hexo d<br>hexo s<br></code></pre></td></tr></table></figure><p><img src="/p/9ca71dc6/image-20221123114524565.png" alt="image-20221123114524565"></p><h3 id="3-更新主题-fluid-文件-1"><a href="#3-更新主题-fluid-文件-1" class="headerlink" title="3. 更新主题 fluid 文件"></a>3. 更新主题 fluid 文件</h3><p>这样下次更新主题文件就直接在blogs文件夹中执行更新命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update(需要测试)<br>又或<br>git pull ssh_origin fluid(需要测试)<br></code></pre></td></tr></table></figure><h3 id="4-备份-fluid-主题的配置文件-1"><a href="#4-备份-fluid-主题的配置文件-1" class="headerlink" title="4. 备份 fluid 主题的配置文件"></a>4. 备份 fluid 主题的配置文件</h3><p>考虑到该主题不可能只用一次，所以需要将主题的配置文件进行备份，尤其是在已经修改过配置，适配自己博客的情况下。首先就需要备份fluid的主题配置文件，其路径：<code>D:\BLOGS\blogs\themes\hexo-theme-fluid\_config.yml</code>。至于主题的其他配置，还需要单独处理。</p><h3 id="5-删除与-fluid-主题相关的文件及配置-1"><a href="#5-删除与-fluid-主题相关的文件及配置-1" class="headerlink" title="5. 删除与 fluid 主题相关的文件及配置"></a>5. 删除与 fluid 主题相关的文件及配置</h3><p>删除任何文件之前，都需要搞清楚一件事，这个文件&#x2F;文件夹在下载或者更新的时候，都产生了哪些文件&#x2F;文件夹，只有知道了产生了哪些东西，才能知道我们要删除哪些东西。以fluid为例，主要是删除blogs&#x2F;themes&#x2F;hexo-theme-fluid&#x2F;这个文件夹，除此之外，还要删除.gitmodules文件中与fluid对应的信息。</p><h3 id="6-恢复主题-fluid-文件-1"><a href="#6-恢复主题-fluid-文件-1" class="headerlink" title="6. 恢复主题 fluid 文件"></a>6. 恢复主题 fluid 文件</h3><p>把上面的 1、2、3 步走一遍，然后将主题文件夹中主题配置文件替换成备份的fluid主题配置文件即可。</p><h2 id="3-这样做的好处"><a href="#3-这样做的好处" class="headerlink" title="3. 这样做的好处"></a>3. 这样做的好处</h2><ol><li>主题设置跟站点设置分离，主题本身就是模块化的，方便维护。</li><li>可以设置多个主题，想用哪个用哪个，一套主题对应一套主题配置文件。</li><li>可以随便、随时、随地换主题，只需要更改站点配置里面的主题名字即可。</li><li>方便在多台电脑上同步，当然也方便换电脑。</li></ol><h3 id="真的换电脑了"><a href="#真的换电脑了" class="headerlink" title="真的换电脑了"></a>真的换电脑了</h3><p>这个需要简单几步即可，换新电脑后想同步博客简化操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、完成git安装;<br>2、完成nodejs安装和环境配置;<br>3、npm install hexo-cli -g  <span class="hljs-comment"># 先使用npm工具全局安装hexo-cli，最好使用cmd(管理员)执行该命令;</span><br>4、git <span class="hljs-built_in">clone</span> -b hexo-source git@github.com:dkl-justdoit/dkl-justdoit.github.io.git <span class="hljs-comment"># 通过-b参数可以自行指定要拉取远程库的哪个分支；通过这种方式在本地创建该分支的文件夹，且只包含该远程仓库的该分支下所有文件，其他分支文件不会包含；而且克隆后本地只有这一个分支。</span><br>5、进入dkl-justdoit.github.io文件夹,右键git bash,输入npm install;<br>6、若dkl-justdoit.github.io中有blogs文件夹,则切换到blogs目录后执行git submodule update --init --recursive;若dkl-justdoit.github.io中没有blogs文件夹,则直接执行git submodule update --init --recursive即可。<br>7、打完,收工!开始写博客。<br></code></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://www.cnblogs.com/daoyi/p/hexo-duo-zhu-ti-qie-huan.html">https://www.cnblogs.com/daoyi/p/hexo-duo-zhu-ti-qie-huan.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
      <tag>volantis</tag>
      
      <tag>butterfly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 远程删除分支后，本地 git branch -a 依然能看到的解决办法</title>
    <link href="/p/dcbbdee8.html"/>
    <url>/p/dcbbdee8.html</url>
    
    <content type="html"><![CDATA[<h1 id="git-远程删除分支后，本地-git-branch-a-依然能看到远程的分支"><a href="#git-远程删除分支后，本地-git-branch-a-依然能看到远程的分支" class="headerlink" title="git 远程删除分支后，本地 git branch -a 依然能看到远程的分支"></a>git 远程删除分支后，本地 git branch -a 依然能看到远程的分支</h1><p> <code>git branch -a</code> 命令可以查看所有本地分支和远程分支（<code>git branch -r</code> 可以只查看远程分支）。发现很多在远程仓库已经删除的分支在本地依然可以看到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vain@XXX-BF MINGW64 ~ (hexo-source)<br>$ git branch -a<br>* hexo-source<br>  master<br>  remotes/ssh_origin/hexo-source <span class="hljs-comment"># 带有remotes/都是远程仓库使用过的分支，且如果开启颜色显示的话，会红色显示</span><br><br>vain@XXX-BF MINGW64 ~ (hexo-source)<br>$<br></code></pre></td></tr></table></figure><p> <code>git remote show origin</code>或<code>git remote show ssh_origin</code>，可以查看remote地址，远程分支，还有本地分支与之相对应关系等信息。此时我们可以看到那些远程仓库已经不存在的分支，根据提示，使用 <code>git remote prune origin</code> 或<code>git remote prune ssh_origin</code>命令可以删除那些远程仓库不存在的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote prune ssh_origin<br> <br>Pruning ssh_origin<br>URL: https://github.com/xxx/xxx.git<br> * [pruned] ssh_origin/develop<br> * [pruned] ssh_origin/right<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcpdump和wireshark工具(网络排障)</title>
    <link href="/p/711414cc.html"/>
    <url>/p/711414cc.html</url>
    
    <content type="html"><![CDATA[<h1 id="tcpdump和wireshark工具-网络排障"><a href="#tcpdump和wireshark工具-网络排障" class="headerlink" title="tcpdump和wireshark工具(网络排障)"></a>tcpdump和wireshark工具(网络排障)</h1><h2 id="工具使用及说明"><a href="#工具使用及说明" class="headerlink" title="工具使用及说明"></a>工具使用及说明</h2><h3 id="tcpdump工具的作用及使用方法"><a href="#tcpdump工具的作用及使用方法" class="headerlink" title="tcpdump工具的作用及使用方法"></a>tcpdump工具的作用及使用方法</h3><ul><li>了解使用tcpdump的场景以及在这些场景中具体的使用方法</li></ul><h3 id="wireshark工具的作用及使用方法"><a href="#wireshark工具的作用及使用方法" class="headerlink" title="wireshark工具的作用及使用方法"></a>wireshark工具的作用及使用方法</h3><ul><li>了解使用wireshark的场景以及在这些场景中具体的使用方法</li></ul><hr><h3 id="网络抓包说明"><a href="#网络抓包说明" class="headerlink" title="网络抓包说明"></a>网络抓包说明</h3><p><strong>为什么要抓包？</strong></p><ul><li>定位网络接口问题</li><li>分析其他app数据接口</li><li>学习网络协议，使用抓包工具分析网络数据更直观</li></ul><p><strong>抓包的原理是什么？</strong></p><p>要实现对app的网络数据抓包，需要监控app与服务器交互之间的网络节点，监控其中任意一个网络节点(网卡)，获取所有经过网卡中的数据，对这些数据按照网络协议进行解析，这就是抓包的基本原理。</p><p>但是中间网络节点，不受我们控制，所以基本无法实现抓包的，只能在客户端和服务端进行抓包。</p><p><strong>混杂模式</strong></p><p>混杂模式就是指网卡能接受所有通过它的数据流，不管什么格式，什么地址的，这样网口所有数据包都可以交给应用层处理。正常情况下，设备只接受发给自己或广播地址。其它的地址在底层被转发或丢弃，这样数据不会交给应用层处理。</p><h3 id="抓包工具说明"><a href="#抓包工具说明" class="headerlink" title="抓包工具说明"></a>抓包工具说明</h3><ul><li>fidder：Windows平台最受欢迎的抓包工具，免费易用</li><li>charles：Mac平台最佳抓包工具，易用，收费但可一直试用</li><li>wireshark：老牌抓包工具，跨平台，功能齐全、强大</li><li>tcpdump：命令行程序，适用于手机系统和后台系统</li></ul><table><thead><tr><th>抓包工具</th><th>跨平台</th><th>免费</th><th>仅支持HTTP(S)</th><th>是否易用</th><th>界面操作</th></tr></thead><tbody><tr><td>fidder</td><td>是</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>charles</td><td>是</td><td>否(可试用)</td><td>是</td><td>是</td><td>是</td></tr><tr><td>wireshark</td><td>是</td><td>是</td><td>否</td><td>否</td><td>是</td></tr><tr><td>tcpdump</td><td>是</td><td>是</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><h2 id="tcpdump的简介"><a href="#tcpdump的简介" class="headerlink" title="tcpdump的简介"></a>tcpdump的简介</h2><p>tcpdump(dump the traffic on a network)命令是基于unix系统的命令行的数据报嗅探工具，可以抓取流动在网卡上的数据包。</p><h3 id="查看本地网卡状态"><a href="#查看本地网卡状态" class="headerlink" title="查看本地网卡状态"></a>查看本地网卡状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># netstat -i</span><br>Kernel Interface table<br>Iface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg<br>eth0      1500       93      0      0 0           106      0      0      0 BMRU<br>lo       65536        8      0      0 0             8      0      0      0 LRU<br><span class="hljs-comment"># Iface：存在的网卡;</span><br><span class="hljs-comment"># MTU：最大传输单元;</span><br><span class="hljs-comment"># RX-OK RX-ERR RX-DRP RX-OVR：正确接收数据报的数量以及发生错误、流式、碰撞的总数;</span><br><span class="hljs-comment"># TX-OK TX-ERR TX-DRP TX-OVR：正确发送数据报的数量以及发生错误、流式、碰撞的总数。</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump + 参数 + 表达式<br>tcpdump [-adeflnNOpqStvx][-c&lt;数据包数量&gt;][-<span class="hljs-built_in">dd</span>][-ddd][-F&lt;表达文件&gt;][-i&lt;网络接口&gt;][-r&lt;数据包文件&gt;]<br>[-s&lt;数据包大小&gt;][-tt][-T&lt;数据包类型&gt;][-vv][-w&lt;数据包文件&gt;][表达式]<br></code></pre></td></tr></table></figure><h3 id="tcpdump命令格式"><a href="#tcpdump命令格式" class="headerlink" title="tcpdump命令格式"></a>tcpdump命令格式</h3><p><img src="/p/711414cc/image-20221001134526789.png" alt="image-20221001134526789.png"></p><h2 id="tcpdump的常用选项参数"><a href="#tcpdump的常用选项参数" class="headerlink" title="tcpdump的常用选项参数"></a>tcpdump的常用选项参数</h2><ul><li><p><strong>-h：查看tcpdump版本信息。</strong></p></li><li><p><strong>-D：列出可用于抓包的接口。将会列出接口的数值编号和接口名，它们都可以用于”-i”后。</strong></p></li><li><p><strong>-i：监听指定的网络接口，比如-i eth0，表示对eth0这个网卡进行抓包。</strong></p></li><li><p><strong>-e：在输出行打印出数据链路层的头部信息。</strong></p></li><li><p><strong>-c：抓取指定数目的数据包，比如-c 100表示我要抓取100个满足条件的包。</strong></p></li><li><p><strong>-n：不对具体ip地址进行域名解析，直接显示ip地址。</strong></p></li><li><p><strong>-nn：不对具体ip进行域名解析，并且端口号也不显示服务的名称，直接显示数字。</strong></p></li><li><p><strong>-x：把截取的数据包内容以16进制打印出来。</strong></p></li><li><p><strong>-X：把截取的数据包内容以ASCII文本形式打印出来。</strong></p></li><li><p><strong>-s：截取指定大小的数据包，s0表示完整的数据包。</strong></p></li><li><p><strong>-w：将抓包内容保存到指定文件，并不打印出来。</strong></p></li><li><p>-a：把网络地址和广播地址转换成名称。</p></li><li><p><strong>-t：在输出的每一行不打印时间戳。</strong></p></li><li><p><strong>-v：输出一个稍微详细的信息，如在IP包中包含TTL和服务类型的信息。</strong></p></li><li><p><strong>-vv：输出详细的报文信息。</strong></p></li><li><p>-F：从指定的文件中读取表达式，忽略其他表达式。</p></li><li><p><strong>-r：从指定的文件中读取包(这些包一般通过-w选项产生)。</strong></p></li></ul><p>以下这两个参数：可作抓包的时候打印出信息，作为参考，毕竟我们要在wireshark分析</p><ul><li>-XX：输出数据包的头部数据。</li><li>-vvv：打印和分析的时候，产生非常详细的输出。</li></ul><h3 id="tcpdump-h：查看tcpdump版本信息"><a href="#tcpdump-h：查看tcpdump版本信息" class="headerlink" title="tcpdump -h：查看tcpdump版本信息"></a>tcpdump -h：查看tcpdump版本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump --help</span><br>tcpdump: invalid option -- <span class="hljs-string">&#x27;-&#x27;</span><br>tcpdump version 4.5.1<br>libpcap version 1.5.3<br>Usage: tcpdump [-aAbdDefhHIJKlLnNOpqRStuUvxX] [ -B size ] [ -c count ]<br>                [ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]<br>                [ -i interface ] [ -j tstamptype ] [ -M secret ]<br>                [ -P <span class="hljs-keyword">in</span>|out|inout ]<br>                [ -r file ] [ -s snaplen ] [ -T <span class="hljs-built_in">type</span> ] [ -V file ] [ -w file ]<br>                [ -W filecount ] [ -y datalinktype ] [ -z <span class="hljs-built_in">command</span> ]<br>                [ -Z user ] [ expression ]<br></code></pre></td></tr></table></figure><h3 id="tcpdump-D：列出可用于tcpdump抓取数据包的网卡接口信息"><a href="#tcpdump-D：列出可用于tcpdump抓取数据包的网卡接口信息" class="headerlink" title="tcpdump -D：列出可用于tcpdump抓取数据包的网卡接口信息"></a>tcpdump -D：列出可用于tcpdump抓取数据包的网卡接口信息</h3><ul><li>获取硬件接口列表信息，看到此列表后，可以决定要在哪个接口上捕获流量。它还告诉你接口是否已启动、正在运行，以及它是否是环回接口。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -D</span><br>1.eth0<br>2.nflog (Linux netfilter <span class="hljs-built_in">log</span> (NFLOG) interface)<br>3.nfqueue (Linux netfilter queue (NFQUEUE) interface)<br>4.usbmon1 (USB bus number 1)<br>5.usbmon2 (USB bus number 2)<br>6.any (Pseudo-device that captures on all interfaces)<br>7.lo<br>-------------------------------------------------------------------------------------------------------------------<br>eth0 //表示该服务器的第一块网卡，一般我们tcpdump抓包都使用这块网卡来抓取。可能有eth1，eth2等等<br>nflog //Linux下的网络过滤网卡，一般我们不使用它<br>nfqueue //Linux网络过滤队列接口，一般不使用它<br>usbmon1 //USB总线接口，一般不使用它<br>any //任何网卡接口<br>lo //指的是该主机的回环地址(127.0.0.1)，一般用来测试网络专用，一般的数据都不通过这块网卡，所以我们用tcpdump抓包的时候也不使用这块网卡。<br></code></pre></td></tr></table></figure><h3 id="tcpdump-i：监听指定的网络接口"><a href="#tcpdump-i：监听指定的网络接口" class="headerlink" title="tcpdump -i：监听指定的网络接口"></a>tcpdump -i：监听指定的网络接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># netstat -i</span><br>Kernel Interface table<br>Iface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg<br>eth0      1500      695      0      0 0           472      0      0      0 BMRU<br>lo       65536        8      0      0 0             8      0      0      0 LRU<br>[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 and icmp</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>06:32:09.460471 IP 192.168.32.1 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 7, length 40<br>06:32:09.460500 IP 192.168.32.166 &gt; 192.168.32.1: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 7, length 40<br>06:32:10.474323 IP 192.168.32.1 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 8, length 40<br>06:32:10.474365 IP 192.168.32.166 &gt; 192.168.32.1: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 8, length 40<br>06:32:11.509028 IP 192.168.32.1 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 9, length 40<br>06:32:11.509073 IP 192.168.32.166 &gt; 192.168.32.1: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 9, length 40<br>06:32:12.540879 IP 192.168.32.1 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 10, length 40<br>06:32:12.540919 IP 192.168.32.166 &gt; 192.168.32.1: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 1, <span class="hljs-built_in">seq</span> 10, length 40<br></code></pre></td></tr></table></figure><h3 id="tcpdump-e：在输出行打印出数据链路层的头部信息"><a href="#tcpdump-e：在输出行打印出数据链路层的头部信息" class="headerlink" title="tcpdump -e：在输出行打印出数据链路层的头部信息"></a>tcpdump -e：在输出行打印出数据链路层的头部信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 5 -nn -e</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>22:52:24.460136 00:0c:29:aa:f1:db &gt; 00:50:56:c0:00:08, ethertype IPv4 (0x0800), length 262: 192.168.32.166.22 &gt; 192.168.32.1.14358: Flags [P.], <span class="hljs-built_in">seq</span> 3225709502:3225709698, ack 4145329991, win 177, options [nop,nop,TS val 289241 ecr 6998988], length 196<br>22:52:24.460359 00:50:56:c0:00:08 &gt; 00:0c:29:aa:f1:db, ethertype IPv4 (0x0800), length 66: 192.168.32.1.14358 &gt; 192.168.32.166.22: Flags [.], ack 196, win 258, options [nop,nop,TS val 6998988 ecr 289237], length 0<br>22:52:25.769017 00:50:56:c0:00:08 &gt; 00:0c:29:aa:f1:db, ethertype ARP (0x0806), length 60: Request who-has 192.168.32.166 (00:0c:29:aa:f1:db) tell 192.168.32.1, length 46<br>22:52:25.769047 00:0c:29:aa:f1:db &gt; 00:50:56:c0:00:08, ethertype ARP (0x0806), length 42: Reply 192.168.32.166 is-at 00:0c:29:aa:f1:db, length 28<br>22:52:25.769849 00:0c:29:aa:f1:db &gt; 00:50:56:c0:00:08, ethertype IPv4 (0x0800), length 582: 192.168.32.166.22 &gt; 192.168.32.1.14358: Flags [P.], <span class="hljs-built_in">seq</span> 196:712, ack 1, win 177, options [nop,nop,TS val 290551 ecr 6998988], length 516<br>5 packets captured<br>6 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-c：截取指定数量的数据包"><a href="#tcpdump-c：截取指定数量的数据包" class="headerlink" title="tcpdump -c：截取指定数量的数据包"></a>tcpdump -c：截取指定数量的数据包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 5</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>06:34:39.880221 IP 192.168.32.166.ssh &gt; 192.168.32.1.5480: Flags [P.], <span class="hljs-built_in">seq</span> 3181057663:3181057859, ack 3391998684, win 177, options [nop,nop,TS val 403332 ecr 1132356], length 196<br>06:34:39.880575 IP 192.168.32.1.5480 &gt; 192.168.32.166.ssh: Flags [.], ack 196, win 256, options [nop,nop,TS val 1132358 ecr 403322], length 0<br>06:34:40.883095 IP 192.168.32.166.35632 &gt; public1.114dns.com.domain: 56985+ PTR? 1.32.168.192.in-addr.arpa. (43)<br>06:34:40.905708 IP public1.114dns.com.domain &gt; 192.168.32.166.35632: 56985 NXDomain 0/1/0 (120)<br>06:34:40.906099 IP 192.168.32.166.57403 &gt; public1.114dns.com.domain: 47864+ PTR? 166.32.168.192.in-addr.arpa. (45)<br>5 packets captured<br>15 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-n：不进行网络地址的转换-amp-amp-tcpdump-nn：不进行网络地址及端口的转换"><a href="#tcpdump-n：不进行网络地址的转换-amp-amp-tcpdump-nn：不进行网络地址及端口的转换" class="headerlink" title="tcpdump -n：不进行网络地址的转换 &amp;&amp; tcpdump -nn：不进行网络地址及端口的转换"></a>tcpdump -n：不进行网络地址的转换 &amp;&amp; tcpdump -nn：不进行网络地址及端口的转换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -n</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>06:47:16.333392 IP 192.168.32.166.ssh &gt; 192.168.32.1.5480: Flags [P.], <span class="hljs-built_in">seq</span> 3181074491:3181074687, ack 3392003180, win 177, options [nop,nop,TS val 1159785 ecr 1208001], length 196<br>06:47:16.333749 IP 192.168.32.1.5480 &gt; 192.168.32.166.ssh: Flags [.], ack 196, win 254, options [nop,nop,TS val 1208002 ecr 1159775], length 0<br>06:47:17.334385 IP 192.168.32.166.ssh &gt; 192.168.32.1.5480: Flags [P.], <span class="hljs-built_in">seq</span> 196:568, ack 1, win 177, options [nop,nop,TS val 1160786 ecr 1208002], length 372<br>06:47:17.386151 IP 192.168.32.1.5480 &gt; 192.168.32.166.ssh: Flags [.], ack 568, win 260, options [nop,nop,TS val 1208107 ecr 1160786], length 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br>[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>06:47:25.626276 IP 192.168.32.166.22 &gt; 192.168.32.1.5480: Flags [P.], <span class="hljs-built_in">seq</span> 3181075683:3181075879, ack 3392003304, win 177, options [nop,nop,TS val 1169078 ecr 1208931], length 196<br>06:47:25.626618 IP 192.168.32.1.5480 &gt; 192.168.32.166.22: Flags [.], ack 196, win 256, options [nop,nop,TS val 1208931 ecr 1169073], length 0<br>06:47:26.628365 IP 192.168.32.166.22 &gt; 192.168.32.1.5480: Flags [P.], <span class="hljs-built_in">seq</span> 196:568, ack 1, win 177, options [nop,nop,TS val 1170081 ecr 1208931], length 372<br>06:47:26.680848 IP 192.168.32.1.5480 &gt; 192.168.32.166.22: Flags [.], ack 568, win 255, options [nop,nop,TS val 1209037 ecr 1170081], length 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-s：截取指定大小的数据包"><a href="#tcpdump-s：截取指定大小的数据包" class="headerlink" title="tcpdump -s：截取指定大小的数据包"></a>tcpdump -s：截取指定大小的数据包</h3><p>为了分析数据包的内容，可以通过-s选项改变截取数据包的大小；-s0表示完整数据包(-X：表示以ASCII文本形式显示)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 2 -nn -X -s 200</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 200 bytes<br>06:52:35.539512 IP 192.168.32.166.22 &gt; 192.168.32.1.5480: Flags [P.], <span class="hljs-built_in">seq</span> 3181095687:3181095883, ack 3392006452, win 177, options [nop,nop,TS val 1478992 ecr 1239922], length 196<br>        0x0000:  4510 00f8 6ed0 4000 4006 0928 c0a8 20a6  E...n.@.@..(....<br>        0x0010:  c0a8 2001 0016 1568 bd9b ab07 ca2d e934  .......h.....-.4<br>        0x0020:  8018 00b1 c2e2 0000 0101 080a 0016 9150  ...............P<br>        0x0030:  0012 eb72 0000 00b0 c549 dc8d cfef 1004  ...r.....I......<br>        0x0040:  5a19 8d68 a66a 3d6b 8dd2 aca2 4a03 4bc6  Z..h.j=k....J.K.<br>        0x0050:  3a2b e22f 85d8 b5c5 dea5 bc9b 9f64 b57e  :+./.........d.~<br>        0x0060:  e369 5f5a d79e d4dd 74a5 abde 6362 ceff  .i_Z....t...cb..<br>        0x0070:  c24e 6be2 84f4 8399 1bcc 4c83 12b1 3dd7  .Nk.......L...=.<br>        0x0080:  96a8 9046 b809 f59a 6697 68a9 16a9 a4b6  ...F....f.h.....<br>        0x0090:  ba32 6226 e565 1535 503c 8225 d63b edad  .2b&amp;.e.5P&lt;.%.;..<br>        0x00a0:  4576 9670 0d93 181a b795 dfd1 5457 8558  Ev.p........TW.X<br>        0x00b0:  08ce eecb 3a7d 5918 5f60                 ....:&#125;Y._`<br>06:52:35.539858 IP 192.168.32.1.5480 &gt; 192.168.32.166.22: Flags [.], ack 196, win 256, options [nop,nop,TS val 1239922 ecr 1478987], length 0<br>        0x0000:  4500 0034 7faa 4000 4006 f921 c0a8 2001  E..4..@.@..!....<br>        0x0010:  c0a8 20a6 1568 0016 ca2d e934 bd9b abcb  .....h...-.4....<br>        0x0020:  8010 0100 0497 0000 0101 080a 0012 eb72  ...............r<br>        0x0030:  0016 914b                                ...K<br>2 packets captured<br>2 packets received by filter<br>0 packets dropped by kernel<br><span class="hljs-comment"># -x：把截取的数据包内容以16进制打印出来；-X：把截取的数据包内容以ASCII文本形式打印出来。</span><br></code></pre></td></tr></table></figure><h3 id="tcpdump-w：将抓包内容保存到指定文件，并不打印出来"><a href="#tcpdump-w：将抓包内容保存到指定文件，并不打印出来" class="headerlink" title="tcpdump -w：将抓包内容保存到指定文件，并不打印出来"></a>tcpdump -w：将抓包内容保存到指定文件，并不打印出来</h3><ul><li>将报文抓取后保存为.pcap格式的文件，之后使用wireshark进行查看分析</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 20 -nn -w 0928.pcap</span><br>tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>20 packets captured<br>23 packets received by filter<br>0 packets dropped by kernel<br>[root@localhost ~]<span class="hljs-comment"># </span><br>[root@localhost ~]<span class="hljs-comment"># ls</span><br>0928.pcap  anaconda-ks.cfg  cdrom  etc.tar.gz  nohup.out<br>[root@localhost ~]<span class="hljs-comment"># sz 0928.pcap </span><br><span class="hljs-comment"># 可以通过sz scp或者sftp工具传输0928.pcap报文到本地wireshark进行分析</span><br></code></pre></td></tr></table></figure><h3 id="tcpdump-a：把网络地址和广播地址转换成名称"><a href="#tcpdump-a：把网络地址和广播地址转换成名称" class="headerlink" title="tcpdump -a：把网络地址和广播地址转换成名称"></a>tcpdump -a：把网络地址和广播地址转换成名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 5 -nn -a</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>04:57:01.119940 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 1111385826:1111386022, ack 139811203, win 177, options [nop,nop,TS val 5771439 ecr 9186614], length 196<br>04:57:01.120193 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 196, win 256, options [nop,nop,TS val 9186615 ecr 5771435], length 0<br>04:57:02.122194 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 196:552, ack 1, win 177, options [nop,nop,TS val 5772442 ecr 9186615], length 356<br>04:57:02.172609 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 552, win 255, options [nop,nop,TS val 9186720 ecr 5772442], length 0<br>04:57:04.124794 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 552:892, ack 1, win 177, options [nop,nop,TS val 5774445 ecr 9186720], length 340<br>5 packets captured<br>6 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-t：在输出的每一行不打印时间戳"><a href="#tcpdump-t：在输出的每一行不打印时间戳" class="headerlink" title="tcpdump -t：在输出的每一行不打印时间戳"></a>tcpdump -t：在输出的每一行不打印时间戳</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn -t</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 1111389102:1111389298, ack 139812027, win 177, options [nop,nop,TS val 5884220 ecr 9197891], length 196<br>IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 196, win 255, options [nop,nop,TS val 9197891 ecr 5884214], length 0<br>IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 196:520, ack 1, win 177, options [nop,nop,TS val 5885221 ecr 9197891], length 324<br>IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 520, win 254, options [nop,nop,TS val 9197997 ecr 5885221], length 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-v：输出一个稍微详细的信息，如在IP包中包含TTL和服务类型的信息"><a href="#tcpdump-v：输出一个稍微详细的信息，如在IP包中包含TTL和服务类型的信息" class="headerlink" title="tcpdump -v：输出一个稍微详细的信息，如在IP包中包含TTL和服务类型的信息"></a>tcpdump -v：输出一个稍微详细的信息，如在IP包中包含TTL和服务类型的信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn -t -v</span><br>tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>IP (tos 0x10, ttl 64, <span class="hljs-built_in">id</span> 6098, offset 0, flags [DF], proto TCP (6), length 184)<br>    192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">cksum</span> 0xc2a2 (incorrect -&gt; 0x4859), <span class="hljs-built_in">seq</span> 1111390402:1111390534, ack 139812259, win 177, options [nop,nop,TS val 5976100 ecr 9207078], length 132<br>IP (tos 0x0, ttl 64, <span class="hljs-built_in">id</span> 28652, offset 0, flags [DF], proto TCP (6), length 52)<br>    192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], <span class="hljs-built_in">cksum</span> 0xbf38 (correct), ack 132, win 258, options [nop,nop,TS val 9207078 ecr 5976096], length 0<br>IP (tos 0x10, ttl 64, <span class="hljs-built_in">id</span> 6099, offset 0, flags [DF], proto TCP (6), length 600)<br>    192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">cksum</span> 0xc442 (incorrect -&gt; 0x045c), <span class="hljs-built_in">seq</span> 132:680, ack 1, win 177, options [nop,nop,TS val 5977101 ecr 9207078], length 548<br>IP (tos 0x0, ttl 64, <span class="hljs-built_in">id</span> 28653, offset 0, flags [DF], proto TCP (6), length 52)<br>    192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], <span class="hljs-built_in">cksum</span> 0xb8c0 (correct), ack 680, win 256, options [nop,nop,TS val 9207183 ecr 5977101], length 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-vv：输出详细的报文信息"><a href="#tcpdump-vv：输出详细的报文信息" class="headerlink" title="tcpdump -vv：输出详细的报文信息"></a>tcpdump -vv：输出详细的报文信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn -t -vv</span><br>tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>IP (tos 0x10, ttl 64, <span class="hljs-built_in">id</span> 6104, offset 0, flags [DF], proto TCP (6), length 184)<br>    192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">cksum</span> 0xc2a2 (incorrect -&gt; 0x1688), <span class="hljs-built_in">seq</span> 1111391898:1111392030, ack 139812383, win 177, options [nop,nop,TS val 6036304 ecr 9213100], length 132<br>IP (tos 0x0, ttl 64, <span class="hljs-built_in">id</span> 28660, offset 0, flags [DF], proto TCP (6), length 52)<br>    192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], <span class="hljs-built_in">cksum</span> 0xb631 (correct), <span class="hljs-built_in">seq</span> 1, ack 132, win 259, options [nop,nop,TS val 9213101 ecr 6036298], length 0<br>IP (tos 0x10, ttl 64, <span class="hljs-built_in">id</span> 6105, offset 0, flags [DF], proto TCP (6), length 616)<br>    192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">cksum</span> 0xc452 (incorrect -&gt; 0x4c01), <span class="hljs-built_in">seq</span> 132:696, ack 1, win 177, options [nop,nop,TS val 6037306 ecr 9213101], length 564<br>IP (tos 0x0, ttl 64, <span class="hljs-built_in">id</span> 28661, offset 0, flags [DF], proto TCP (6), length 52)<br>    192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], <span class="hljs-built_in">cksum</span> 0xafa7 (correct), <span class="hljs-built_in">seq</span> 1, ack 696, win 256, options [nop,nop,TS val 9213206 ecr 6037306], length 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-r：从指定的文件中读取包-这些包一般通过-w选项产生"><a href="#tcpdump-r：从指定的文件中读取包-这些包一般通过-w选项产生" class="headerlink" title="tcpdump -r：从指定的文件中读取包(这些包一般通过-w选项产生)"></a>tcpdump -r：从指定的文件中读取包(这些包一般通过-w选项产生)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls</span><br>0928.pcap  anaconda-ks.cfg  cdrom  etc.tar.gz  nohup.out<br>[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn -r 0928.pcap </span><br>reading from file 0928.pcap, link-type EN10MB (Ethernet)<br>22:45:40.204635 IP 192.168.32.166.22 &gt; 192.168.32.1.14358: Flags [P.], <span class="hljs-built_in">seq</span> 3225700090:3225700222, ack 4145327419, win 177, options [nop,nop,TS val 4294852282 ecr 6958562], length 132<br>22:45:40.204851 IP 192.168.32.1.14358 &gt; 192.168.32.166.22: Flags [.], ack 132, win 260, options [nop,nop,TS val 6958564 ecr 4294852264], length 0<br>22:45:54.659141 IP 192.168.32.166.123 &gt; 162.159.200.1.123: NTPv3, Client, length 48<br>22:45:55.920286 IP 192.168.32.166.123 &gt; 162.159.200.123.123: NTPv3, Client, length 48<br>[root@localhost ~]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h3 id="tcpdump-q：快速输出，仅列出少数的传输协议信息"><a href="#tcpdump-q：快速输出，仅列出少数的传输协议信息" class="headerlink" title="tcpdump -q：快速输出，仅列出少数的传输协议信息"></a>tcpdump -q：快速输出，仅列出少数的传输协议信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn -q</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>05:13:31.753240 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: tcp 196<br>05:13:31.753450 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: tcp 0<br>05:13:32.754991 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: tcp 180<br>05:13:32.805703 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: tcp 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-p：不让网络界面进入混杂模式"><a href="#tcpdump-p：不让网络界面进入混杂模式" class="headerlink" title="tcpdump -p：不让网络界面进入混杂模式"></a>tcpdump -p：不让网络界面进入混杂模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn -p</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>05:14:59.146874 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 1111423886:1111424082, ack 139816387, win 177, options [nop,nop,TS val 6849467 ecr 9294417], length 196<br>05:14:59.147090 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 196, win 255, options [nop,nop,TS val 9294418 ecr 6849464], length 0<br>05:15:00.148070 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 196:552, ack 1, win 177, options [nop,nop,TS val 6850468 ecr 9294418], length 356<br>05:15:00.199906 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 552, win 260, options [nop,nop,TS val 9294523 ecr 6850468], length 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="tcpdump-T：将监听到的包直接解释为指定的类型的报文"><a href="#tcpdump-T：将监听到的包直接解释为指定的类型的报文" class="headerlink" title="tcpdump -T：将监听到的包直接解释为指定的类型的报文"></a>tcpdump -T：将监听到的包直接解释为指定的类型的报文</h3><ul><li>常见的类型有<strong>rpc</strong>(远程过程调用)和<strong>snmp</strong>(简单网络管理协议)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 -c 4 -nn -T rpc</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>05:18:57.401450 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 1111425846:1111426042, ack 139817067, win 177, options [nop,nop,TS val 7087721 ecr 9318242], length 196<br>05:18:57.401680 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 196, win 260, options [nop,nop,TS val 9318243 ecr 7087716], length 0<br>05:18:58.410418 IP 192.168.32.166.22 &gt; 192.168.32.1.9418: Flags [P.], <span class="hljs-built_in">seq</span> 196:552, ack 1, win 177, options [nop,nop,TS val 7088730 ecr 9318243], length 356<br>05:18:58.462108 IP 192.168.32.1.9418 &gt; 192.168.32.166.22: Flags [.], ack 552, win 258, options [nop,nop,TS val 9318349 ecr 7088730], length 0<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h2 id="tcpdump的常用协议参数-协议关键字"><a href="#tcpdump的常用协议参数-协议关键字" class="headerlink" title="tcpdump的常用协议参数(协议关键字)"></a>tcpdump的常用协议参数(协议关键字)</h2><ul><li>缺省是所有协议的信息包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">传输层协议：tcp、udp、icmp<br>网络层协议：ip、ipv6<br>数据链路层协议：arp、rarp、ether、wlan<br></code></pre></td></tr></table></figure><h2 id="tcpdump的常用方向参数-方向关键字"><a href="#tcpdump的常用方向参数-方向关键字" class="headerlink" title="tcpdump的常用方向参数(方向关键字)"></a>tcpdump的常用方向参数(方向关键字)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果没有特殊说明，默认的类型是src or dst</span><br>src：ip包的源地址，如：src 10.1.110.110<br>dst：ip包的目标地址，如：dst 10.1.110.110<br>src and dst：ip包的源地址和目的地址，如：src and dst 10.1.110.110<br>src or dst：ip包的源地址或目的地址，如：src and dst 10.1.110.110<br></code></pre></td></tr></table></figure><h2 id="tcpdump的常用类型参数-类型关键字"><a href="#tcpdump的常用类型参数-类型关键字" class="headerlink" title="tcpdump的常用类型参数(类型关键字)"></a>tcpdump的常用类型参数(类型关键字)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果没有特殊说明，默认的类型是host</span><br>host：指明一台主机。如：host 10.1.110.110<br>net：指明一个网络地址，如：net 10.1.0.0/16<br>port：指明端口号：如：port 8090<br>port range：指明一组端口号：如 port range 8800-8803<br></code></pre></td></tr></table></figure><h2 id="tcpdump的其他类型参数-其他类型关键字"><a href="#tcpdump的其他类型参数-其他类型关键字" class="headerlink" title="tcpdump的其他类型参数(其他类型关键字)"></a>tcpdump的其他类型参数(其他类型关键字)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gateway、broadcast、less、greater<br></code></pre></td></tr></table></figure><h2 id="tcpdump中逻辑运算符和比较运算符的使用"><a href="#tcpdump中逻辑运算符和比较运算符的使用" class="headerlink" title="tcpdump中逻辑运算符和比较运算符的使用"></a>tcpdump中逻辑运算符和比较运算符的使用</h2><ul><li>逻辑运算符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">非运算：<span class="hljs-string">&#x27;not&#x27;</span>/<span class="hljs-string">&#x27;!&#x27;</span><br>与运算：<span class="hljs-string">&#x27;and&#x27;</span>/<span class="hljs-string">&#x27;&amp;&amp;&#x27;</span><br>或运算：<span class="hljs-string">&#x27;or&#x27;</span>/<span class="hljs-string">&#x27;||&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>比较运算符</li></ul><table><thead><tr><th>英文写法</th><th>C语言写法</th><th>含义</th></tr></thead><tbody><tr><td>eq</td><td>&#x3D;&#x3D;</td><td>equal</td></tr><tr><td>ne</td><td>!&#x3D;</td><td>not equal</td></tr><tr><td>gt</td><td>&gt;</td><td>greater than</td></tr><tr><td>lt</td><td>&lt;</td><td>less than</td></tr><tr><td>ge</td><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>le</td><td>&lt;&#x3D;</td><td>less than or equal to</td></tr></tbody></table><ul><li>注：表达式区分大小写，“udp”不能写成“Udp”，“eq”不能写成“Eq”。</li></ul><h2 id="tcpdump的常见使用"><a href="#tcpdump的常见使用" class="headerlink" title="tcpdump的常见使用"></a>tcpdump的常见使用</h2><h3 id="抓取指定mac的数据包"><a href="#抓取指定mac的数据包" class="headerlink" title="抓取指定mac的数据包"></a>抓取指定mac的数据包</h3><ul><li>tcpdump -i eth0 -c 4 ether src [mac地址] -nne</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 -c 4 ether src 00:0c:29:aa:f1:db -nne</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>21:00:27.163680 00:0c:29:aa:f1:db &gt; 00:50:56:c0:00:08, ethertype IPv4 (0x0800), length 262: 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 3818271207:3818271403, ack 131793019, win 177, options [nop,nop,TS val 4294809218 ecr 470878], length 196<br>21:00:29.165674 00:0c:29:aa:f1:db &gt; 00:50:56:c0:00:08, ethertype IPv4 (0x0800), length 358: 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 196:488, ack 1, win 177, options [nop,nop,TS val 4294811220 ecr 470878], length 292<br>21:00:30.167267 00:0c:29:aa:f1:db &gt; 00:50:56:c0:00:08, ethertype IPv4 (0x0800), length 342: 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 488:764, ack 1, win 177, options [nop,nop,TS val 4294812222 ecr 471085], length 276<br>21:00:31.168938 00:0c:29:aa:f1:db &gt; 00:50:56:c0:00:08, ethertype IPv4 (0x0800), length 342: 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 764:1040, ack 1, win 177, options [nop,nop,TS val 4294813223 ecr 471184], length 276<br>4 packets captured<br>4 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="同时抓取多个地址，其中一个方向的地址为多个"><a href="#同时抓取多个地址，其中一个方向的地址为多个" class="headerlink" title="同时抓取多个地址，其中一个方向的地址为多个"></a>同时抓取多个地址，其中一个方向的地址为多个</h3><ul><li>tcpdump -i eth0 host 192.168.32.166 and host ‘(8.8.8.8 or 114.114.114.114)’ -nne</li><li>ping 114.114.114.114 -c 2 ; ping 8.8.8.8 -c 2</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 and host &#x27;(8.8.8.8 or 114.114.114.114)&#x27; -nne</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br><br>21:07:13.201077 00:0c:29:aa:f1:db &gt; 00:50:56:fa:20:ae, ethertype IPv4 (0x0800), length 98: 192.168.32.166 &gt; 114.114.114.114: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 2151, <span class="hljs-built_in">seq</span> 3, length 64<br>21:07:13.217661 00:50:56:fa:20:ae &gt; 00:0c:29:aa:f1:db, ethertype IPv4 (0x0800), length 98: 114.114.114.114 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 2151, <span class="hljs-built_in">seq</span> 3, length 64<br>21:07:14.203185 00:0c:29:aa:f1:db &gt; 00:50:56:fa:20:ae, ethertype IPv4 (0x0800), length 98: 192.168.32.166 &gt; 114.114.114.114: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 2151, <span class="hljs-built_in">seq</span> 4, length 64<br>21:07:14.218540 00:50:56:fa:20:ae &gt; 00:0c:29:aa:f1:db, ethertype IPv4 (0x0800), length 98: 114.114.114.114 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 2151, <span class="hljs-built_in">seq</span> 4, length 64<br>21:07:16.447637 00:0c:29:aa:f1:db &gt; 00:50:56:fa:20:ae, ethertype IPv4 (0x0800), length 98: 192.168.32.166 &gt; 8.8.8.8: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 2152, <span class="hljs-built_in">seq</span> 1, length 64<br>21:07:16.533656 00:50:56:fa:20:ae &gt; 00:0c:29:aa:f1:db, ethertype IPv4 (0x0800), length 98: 8.8.8.8 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 2152, <span class="hljs-built_in">seq</span> 1, length 64<br>21:07:17.449386 00:0c:29:aa:f1:db &gt; 00:50:56:fa:20:ae, ethertype IPv4 (0x0800), length 98: 192.168.32.166 &gt; 8.8.8.8: ICMP <span class="hljs-built_in">echo</span> request, <span class="hljs-built_in">id</span> 2152, <span class="hljs-built_in">seq</span> 2, length 64<br>21:07:17.530102 00:50:56:fa:20:ae &gt; 00:0c:29:aa:f1:db, ethertype IPv4 (0x0800), length 98: 8.8.8.8 &gt; 192.168.32.166: ICMP <span class="hljs-built_in">echo</span> reply, <span class="hljs-built_in">id</span> 2152, <span class="hljs-built_in">seq</span> 2, length 64<br>^C<br>8 packets captured<br>8 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="抓取指定源地址、目的IP的数据包"><a href="#抓取指定源地址、目的IP的数据包" class="headerlink" title="抓取指定源地址、目的IP的数据包"></a>抓取指定源地址、目的IP的数据包</h3><ul><li>tcpdump -i eth0 src 192.168.32.166 and dst 192.168.32.1 -nn</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 src 192.168.32.166 and dst 192.168.32.1 -nn</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>21:14:27.905402 IP 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 3818303571:3818303767, ack 131804491, win 217, options [nop,nop,TS val 682664 ecr 554951], length 196<br>21:14:28.906741 IP 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 196:408, ack 1, win 217, options [nop,nop,TS val 683665 ecr 554952], length 212<br>21:14:29.907188 IP 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 408:604, ack 1, win 217, options [nop,nop,TS val 684666 ecr 555057], length 196<br>21:14:31.910530 IP 192.168.32.166.22 &gt; 192.168.32.1.4297: Flags [P.], <span class="hljs-built_in">seq</span> 604:800, ack 1, win 217, options [nop,nop,TS val 686669 ecr 555157], length 196<br>^C<br>4 packets captured<br>5 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="抓取排除某地址或端口的数据包"><a href="#抓取排除某地址或端口的数据包" class="headerlink" title="抓取排除某地址或端口的数据包"></a>抓取排除某地址或端口的数据包</h3><ul><li>正常表达式加一个not即可</li><li>tcpdump -i eth0 host 192.168.32.166 and not port 22 -nn -c 3</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tcpdump -i eth0 host 192.168.32.166 and not port 22 -nn -c 3</span><br>tcpdump: verbose output suppressed, use -v or -vv <span class="hljs-keyword">for</span> full protocol decode<br>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes<br>21:16:16.665783 IP 192.168.32.166.123 &gt; 193.182.111.141.123: NTPv3, Client, length 48<br>21:16:22.540988 ARP, Request who-has 192.168.32.166 (00:0c:29:aa:f1:db) tell 192.168.32.1, length 46<br>21:16:22.541024 ARP, Reply 192.168.32.166 is-at 00:0c:29:aa:f1:db, length 28<br>3 packets captured<br>3 packets received by filter<br>0 packets dropped by kernel<br></code></pre></td></tr></table></figure><h3 id="抓取指定tcp标识位的数据包"><a href="#抓取指定tcp标识位的数据包" class="headerlink" title="抓取指定tcp标识位的数据包"></a>抓取指定tcp标识位的数据包</h3><p>tcp包里有个flags字段表示包的类型，tcpdump可以根据该字段抓取相应类型的包：tcp[13]就是tcp flags(URG,ACK,PSH,RST,SYN,FIN)，按照这个计算标志位置位后的数值，只有FIN置位为1，ACK+SYN置位就是18。</p><ul><li>抓取FIN包：tcpdump -i any ‘tcp[13] &amp; 1 !&#x3D; 0’ -s0</li><li>抓取SYN+FIN包：tcpdump -i any -p tcp ‘tcp[13] &amp; 3 !&#x3D; 0’ -s0</li><li>抓取RST包：tcpdump -i any port 9001 and ‘tcp[13] &amp; 4 !&#x3D; 0’ -s0</li></ul><h3 id="抓取带vlan的数据包"><a href="#抓取带vlan的数据包" class="headerlink" title="抓取带vlan的数据包"></a>抓取带vlan的数据包</h3><ul><li>tcpdump -i eth0 vlan and host 192.168.32.166 -c 3 -nn</li></ul><h2 id="wireshark的简介"><a href="#wireshark的简介" class="headerlink" title="wireshark的简介"></a>wireshark的简介</h2><p>Wireshark是使用最广泛的一款「开源抓包软件」，常用来检测网络问题、攻击溯源、或者分析底层通信机制。它使用WinPCAP作为接口，直接与网卡进行数据报文交换。</p><p>Wireshark使用的环境大致分为两种，一种是电脑直连互联网的单机环境，另外一种就是应用比较多的互联网环境，也就是连接交换机的情况。</p><p>「单机情况」下，Wireshark直接抓取本机网卡的网络流量；<br>「交换机情况」下，Wireshark通过端口镜像、ARP欺骗等方式获取局域网中的网络流量。</p><ul><li>端口镜像：利用交换机的接口，将局域网的网络流量转发到指定电脑的网卡上。</li><li>ARP欺骗：交换机根据MAC地址转发数据，伪装其他终端的MAC地址，从而获取局域网的网络流量。</li></ul><h2 id="wireshark中过滤器的使用"><a href="#wireshark中过滤器的使用" class="headerlink" title="wireshark中过滤器的使用"></a>wireshark中过滤器的使用</h2><p>过滤器是Wireshark的核心功能，也是我们平时使用最多的一个功能。</p><p>Wireshark提供了两个过滤器：抓包过滤器 和 显示过滤器。两个过滤器的过滤思路不同。</p><ol><li>抓包过滤器：重点在动作，需要的包我才抓，不需要的我就不抓。</li><li>显示过滤器：重点在数据的展示，包已经抓了，只是不显示出来。</li></ol><h3 id="1-抓包过滤器"><a href="#1-抓包过滤器" class="headerlink" title="1. 抓包过滤器"></a>1. 抓包过滤器</h3><p>抓包过滤器在抓包前使用，它的过滤有一个基本的语法格式：BPF语法格式。</p><h4 id="1）BPF语法"><a href="#1）BPF语法" class="headerlink" title="1）BPF语法"></a>1）BPF语法</h4><p>BPF（全称 Berkeley Packet Filter），中文叫伯克利封包过滤器，它有四个核心元素：类型、方向、协议 和 逻辑运算符。</p><ol><li>类型Type：主机（host）、网段（net）、端口（port）</li><li>方向Dir：源地址（src）、目标地址（dst）</li><li>协议Proto：各种网络协议，比如：tcp、udp、http</li><li>逻辑运算符：与（ &amp;&amp; ）、或（ || ）、非（ ！）</li></ol><p>四个元素可以自由组合，比如：</p><ul><li>src host 192.168.31.1：抓取源IP为 192.168.31.1 的数据包</li><li>tcp || udp：抓取 TCP 或者 UDP 协议的数据包</li></ul><h4 id="2）使用方式"><a href="#2）使用方式" class="headerlink" title="2）使用方式"></a>2）使用方式</h4><p>使用抓包过滤器时，需要先停止抓包，设置完过滤规则后，再开始抓包。</p><p>停止抓包的前提下，点击工具栏的捕获按钮，点击选项。</p><p><img src="/p/711414cc/image-20221001133811867.png"></p><p>在弹出的捕获选项界面，最下方的输入框中输入过滤语句，点击开始即可抓包。</p><p><img src="/p/711414cc/image-20221001134200335.png"></p><p>提示：抓包过滤器的输入框，会自动检测语法，绿色代表语法正确，红色代表语法错误。</p><h3 id="2-显示过滤器"><a href="#2-显示过滤器" class="headerlink" title="2. 显示过滤器"></a>2. 显示过滤器</h3><p>显示过滤器在抓包后或者抓包的过程中使用。</p><h4 id="1）语法结构"><a href="#1）语法结构" class="headerlink" title="1）语法结构"></a>1）语法结构</h4><p>显示过滤器的语法包含5个核心元素：IP、端口、协议、比较运算符和逻辑运算符。</p><ol><li>IP地址：ip.addr、ip.src、ip.dst</li><li>端口：tcp.port、tcp.srcport、tcp.dstport</li><li>协议：tcp、udp、http</li><li>比较运算符：&gt; &lt; &#x3D;&#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;</li><li>逻辑运算符：and、or、not、xor（有且仅有一个条件被满足）</li></ol><p>5个核心元素可以自由组合，比如：</p><ul><li>ip.addr &#x3D;&#x3D; 192.168.32.121：显示IP地址为 192.168.32.121 的数据包</li><li>tcp.port &#x3D;&#x3D; 80 ：显示端口为 80 的数据包</li></ul><h4 id="2）使用方式-1"><a href="#2）使用方式-1" class="headerlink" title="2）使用方式"></a>2）使用方式</h4><p>在过滤栏输入过滤语句，修改后立即生效。</p><p><img src="/p/711414cc/image-20221001134526756.png"></p><p>提示：过滤栏有自动纠错功能，绿色表示语法正确，红色表示语法错误。</p><h2 id="wireshark的常见使用"><a href="#wireshark的常见使用" class="headerlink" title="wireshark的常见使用"></a>wireshark的常见使用</h2><h3 id="显示过滤器的常见使用"><a href="#显示过滤器的常见使用" class="headerlink" title="显示过滤器的常见使用"></a>显示过滤器的常见使用</h3><ul><li>显示snmp或dns或icmp包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snmp || dns || icmp<br></code></pre></td></tr></table></figure><ul><li>显示来源或目的ip地址为192.168.32.166的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip.add == 192.168.32.166<br></code></pre></td></tr></table></figure><ul><li>显示来源不为192.168.32.1或者目的不为192.168.32.166的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip.src != 192.168.32.1 or ip.dst != 192.168.32.166<br></code></pre></td></tr></table></figure><ul><li>显示来源不为192.168.32.1并且目的不为192.168.32.166的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip.src != 192.168.32.1 and ip.dst != 192.168.32.166<br></code></pre></td></tr></table></figure><ul><li>显示来源或目的的udp端口号为5668的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">udp.port eq 5668<br></code></pre></td></tr></table></figure><ul><li>显示目的tcp端口号为25的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcp.dstport == 25<br></code></pre></td></tr></table></figure><ul><li>显示带有tcp标志的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcp.flags<br></code></pre></td></tr></table></figure><ul><li>显示带有tcp SYN标志的包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcp.flags.syn eq 0x02<br></code></pre></td></tr></table></figure><h3 id="抓包过滤器的常见使用"><a href="#抓包过滤器的常见使用" class="headerlink" title="抓包过滤器的常见使用"></a>抓包过滤器的常见使用</h3><ul><li>只捕获某主机的所有流量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">host 192.168.32.166 <span class="hljs-comment">#捕获源目主机均为192.168.32.166</span><br>src 192.168.32.166 <span class="hljs-comment">#捕获源主机均为192.168.32.166</span><br>dst 192.168.32.166 <span class="hljs-comment">#捕获目主机均为192.168.32.166</span><br>net 192.168.32.0/24 <span class="hljs-comment">#捕获网段为192.168.32.0的所有主机的所有流量</span><br></code></pre></td></tr></table></figure><ul><li>只捕获特定端口的流量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcp portrange 8000-9000 and port 80 <span class="hljs-comment">#捕获tcp协议端口8000-900和80端口的流量</span><br>port 5060 <span class="hljs-comment">#捕获sip流量，因为sip的默认端口为5060，举一反三：port 22 #捕获的是ssh流量</span><br></code></pre></td></tr></table></figure><ul><li>捕获vlan的流量<ul><li>捕获命令中带有vlan字段，可以捕获接口上有vlan标签的数据包，具体使用方法：</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vlan and (host 192.168.32.166 and port 80) <span class="hljs-comment">#捕获vlan中主机192.168.32.166，前提是有vlan，在WiFi中不一定可以捕获到相应的流量，局域网（二层环境中vlan标签很常见）</span><br></code></pre></td></tr></table></figure><ul><li>只(不)捕获arp流量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">host 192.168.32.166 and arp <span class="hljs-comment"># 只捕获主机为192.168.32.166的arp流量</span><br>host 192.168.32.166 and !arp <span class="hljs-comment"># 只捕获除主机为192.168.32.166以外流量中的arp流量</span><br>arp <span class="hljs-comment">#捕获接口中的所有arp请求</span><br>!arp  <span class="hljs-comment">#捕获接口中的所有非arp请求</span><br></code></pre></td></tr></table></figure><ul><li>只捕获某主机的dns流量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">host 192.168.32.166 and port 53 <span class="hljs-comment"># 只捕获主机为192.168.32.166的dns流量</span><br>src 192.168.32.166 and port 53 <span class="hljs-comment"># 只捕获主机192.168.32.166对外的dns流量</span><br>dst 192.168.32.166 and port 53 <span class="hljs-comment"># 只捕获主机192.168.32.166的dns流量</span><br>port 53 <span class="hljs-comment"># 捕获接口中的所有主机的dns流量</span><br></code></pre></td></tr></table></figure><ul><li>只(不)捕获某主机的http流量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">host 192.168.32.166 and port 80 and http <span class="hljs-comment"># 只捕获主机为192.168.32.166的http流量，注意如果http端口为8080，需要将80改为8080</span><br>port 80 and http <span class="hljs-comment"># 捕获所有经过该接口的http流量，同样如果http端口为8080，需要将80改为8080</span><br>not port 80 <span class="hljs-comment"># 捕获除http以外的所有流量，同样如果http端口为8080，需要将80改为8080</span><br>not port 80 and http <span class="hljs-comment"># 捕获除http以外的所有流量，同样如果http端口为8080，需要将80改为8080</span><br></code></pre></td></tr></table></figure><h2 id="wireshark使用时的注意事项"><a href="#wireshark使用时的注意事项" class="headerlink" title="wireshark使用时的注意事项"></a>wireshark使用时的注意事项</h2><p>局域网的所有流量都会发送给我们的电脑，默认情况下，我们的电脑只会对自己mac的流量进行解包，而丢弃其他mac的数据包。<br>开启混杂模式后，我们就可以解析其他mac的数据包，因此，我们使用Wireshark时，通常都会开启混杂模式。</p><p>点击菜单栏的「捕获」按钮，点击「选项」，勾选「在所有接口上使用混杂模式」。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>工具</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>tcpdump</tag>
      
      <tag>wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo new 之后自动使用Typora打开MD源文件</title>
    <link href="/p/83eb35.html"/>
    <url>/p/83eb35.html</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-new执行后自动使用Typora打开MD源文件"><a href="#hexo-new执行后自动使用Typora打开MD源文件" class="headerlink" title="hexo new执行后自动使用Typora打开MD源文件"></a>hexo new执行后自动使用Typora打开MD源文件</h1><h2 id="1-hexo-new执行后能够自动打开MD源文件"><a href="#1-hexo-new执行后能够自动打开MD源文件" class="headerlink" title="1. hexo new执行后能够自动打开MD源文件"></a>1. hexo new执行后能够自动打开MD源文件</h2><p>HEXO 的 GitHub 项目里，有人提出了类似的需求：<a href="https://github.com/hexojs/hexo/issues/1007">其解决方案</a></p><p>Tommy351 指出，可以在Hexo根目录下的 scripts 目录(若没有，则新建一个blogs&#x2F;scripts)中创建一个名为<code>openNewFile</code>的JavaScript脚本，监听hexo new 这个动作。在检测到 hexo new 之后，执行编辑器打开的命令，blogs&#x2F;scripts目录结构如下：</p><p><img src="/p/83eb35/image-20221128155536382.png" alt="image-20221128155536382"></p><p>Tommy351 给出的js代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;<br><span class="hljs-comment">// Hexo 2.x</span><br>hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)&#123;<br>  <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;vi&#x27;</span>, [path]);<br>&#125;);<br><span class="hljs-comment">// Hexo 3</span><br>hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;vi&#x27;</span>, [data.<span class="hljs-property">path</span>]);<br>&#125;);<br><span class="hljs-comment">// # 其中vi要替换为你的文本编辑器的绝对路径</span><br></code></pre></td></tr></table></figure><p>整理后的js代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;<br><span class="hljs-comment">// Hexo 2.x</span><br>hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)&#123;<br>  <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;vi&#x27;</span>, [path]);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;<br><span class="hljs-comment">// Hexo 3</span><br>hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;vi&#x27;</span>, [data.<span class="hljs-property">path</span>]);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)&#123;  <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;vi&#x27;</span>, [path]);&#125;);<br># <span class="hljs-title class_">Hexo</span> <span class="hljs-number">2.</span>x 版本号<br># 其中vi要替换为你的文本编辑器的绝对路径<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;  <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;vi&#x27;</span>, [data.<span class="hljs-property">path</span>]);&#125;);<br># <span class="hljs-title class_">Hexo</span> <span class="hljs-number">3.</span>x 版本号<br># 其中vi要替换为你的文本编辑器的绝对路径<br></code></pre></td></tr></table></figure><h2 id="2-hexo-new新建MD源文件测试"><a href="#2-hexo-new新建MD源文件测试" class="headerlink" title="2. hexo new新建MD源文件测试"></a>2. hexo new新建MD源文件测试</h2><p>其中，blogs&#x2F;scripts目录下openNewFile.js中的代码(这里使用hexo 3以后的版本)如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;    <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;D:/Program Files/Typora/Typora.exe &#x27;</span>, [data.<span class="hljs-property">path</span>]);&#125;); <br>或<br><span class="hljs-keyword">var</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;<br><span class="hljs-comment">// Hexo 3</span><br>hexo.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;D:/Program Files/Typora/Typora.exe&#x27;</span>, [data.<span class="hljs-property">path</span>]);<br>&#125;);<br></code></pre></td></tr></table></figure><p>此时在命令行新建博客文章：<code>hexo new &#39;hexo new执行后自动使用Typora打开MD源文件&#39;</code>，会发现创建MD源文件之后就会自动使用Typora打开刚才新创建的博客MD源文件。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改Git的默认家目录</title>
    <link href="/p/3c94ef76.html"/>
    <url>/p/3c94ef76.html</url>
    
    <content type="html"><![CDATA[<h1 id="修改Git的默认家目录"><a href="#修改Git的默认家目录" class="headerlink" title="修改Git的默认家目录"></a>修改Git的默认家目录</h1><p>前提条件：Git已经安装</p><h2 id="如何修改git的默认家目录"><a href="#如何修改git的默认家目录" class="headerlink" title="如何修改git的默认家目录"></a>如何修改git的默认家目录</h2><ol><li>首先查看未修改前的Git默认家目录，以我这台电脑为例，右键打开git bash后操作如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vain@XXX-BF MINGW64 /c/Users/vain/Desktop<br>$ <span class="hljs-built_in">cd</span>     <span class="hljs-comment"># cd和cd ~作用是相同的</span><br>vain@XXX-BF MINGW64 ~ (hexo-source)<br>$ <span class="hljs-built_in">pwd</span><br>/c/Users/vain<br>vain@XXX-BF MINGW64 ~ (hexo-source)<br>$<br></code></pre></td></tr></table></figure><ol start="2"><li>在环境变量的用户变量中，添加一个变量，变量名：<code>HOME</code>;变量值：<code>D:\BLOGS</code>。</li></ol><p><img src="/p/3c94ef76/image-20221122163705073.png" alt="image-20221122163705073"></p><ol start="3"><li>验证修改后的Git默认家目录。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vain@XXX-BF MINGW64 /c/Users/vain/Desktop<br>$ <span class="hljs-built_in">cd</span><br>vain@XXX-BF MINGW64 ~ (hexo-source)<br>$ <span class="hljs-built_in">pwd</span><br>/d/BLOGS<br>vain@XXX-BF MINGW64 ~ (hexo-source)<br>$<br></code></pre></td></tr></table></figure><ol start="4"><li>当然如果想要打开其他路径，也是可以的，打开对应路径的文件夹，在文件夹中右键git bash即可。</li></ol>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git中submodule子模块的简单使用</title>
    <link href="/p/c697b138.html"/>
    <url>/p/c697b138.html</url>
    
    <content type="html"><![CDATA[<h1 id="git中submodule子模块的简单使用"><a href="#git中submodule子模块的简单使用" class="headerlink" title="git中submodule子模块的简单使用"></a>git中submodule子模块的简单使用</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>Git中的submodule子模块，可以把别人维护的仓库当成子模块来给使用，成为自己项目的子模块，在git中使用子模块可以减少冗余重复，大大提高自己的效率。虽然不需要负责子模块的维护，但是还是要在必要的时候进行子模块的同步更新，所以能够简单使用即可，用什么学什么。</p><h2 id="2-子模块的添加"><a href="#2-子模块的添加" class="headerlink" title="2. 子模块的添加"></a>2. 子模块的添加</h2><p>添加子模块非常简单，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">以博客为例，这里需要进入blogs目录执行<br>git submodule add &lt;url&gt; &lt;path&gt;<br>其中，`url`为子模块的路径，`path`为该子模块存储的目录路径。<br></code></pre></td></tr></table></figure><p>执行成功后，<code>git status</code>会看到项目中修改了<code>.gitmodules</code>，并增加了一个新文件（为刚刚添加的路径）</p><p><code>git diff --cached</code>查看修改内容可以看到增加了子模块，并且新文件下为子模块的提交hash摘要</p><p><code>git commit</code>提交即完成子模块的添加</p><h2 id="3-子模块的使用"><a href="#3-子模块的使用" class="headerlink" title="3. 子模块的使用"></a>3. 子模块的使用</h2><p>添加子模块后，默认子模块目录下无任何内容。需要在博客的blogs目录中执行如下命令完成子模块的下载，子模块目录下有了源码，再执行相应的makefile即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">以博客为例，这里同样需要进入blogs目录执行<br>git submodule init<br>git submodule update<br>或<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p>如果只是想拉取指定子模块，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --init 子模块名字<br></code></pre></td></tr></table></figure><p>如果想要拉取所有的子模块以及子模块下面的子模块，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p>如果只是想拉取当前目录下所有的子模块，就去掉<code>--recursive</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --init<br></code></pre></td></tr></table></figure><h2 id="4-子模块的更新"><a href="#4-子模块的更新" class="headerlink" title="4. 子模块的更新"></a>4. 子模块的更新</h2><p>子模块的维护者提交了更新后，使用子模块的项目必须手动更新才能包含最新的提交。在项目中，进入到子模块目录下，执行 <code>git pull</code>更新，查看<code>git log</code>查看相应提交。完成后返回到项目目录，可以看到子模块有待提交的更新，使用<code>git add</code>，提交即可。</p><p>当远程子模块有更新时，如果主仓库只想更新某个子模块，则进入该子模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br></code></pre></td></tr></table></figure><p>如果想要更新所有子模块，则使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule foreach git pull<br></code></pre></td></tr></table></figure><h2 id="5-修改并提交子模块"><a href="#5-修改并提交子模块" class="headerlink" title="5.修改并提交子模块"></a>5.修改并提交子模块</h2><p>先进入到子模块目录，如<code>hexo-theme-fluid目录</code>，然后像正常的仓库一样，进行修改，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout fluid<br>git add .<br>git commit -m <span class="hljs-string">&quot;增加了fluid的xxx功能&quot;</span><br>git push ssh_origin fluid<br></code></pre></td></tr></table></figure><h2 id="6-删除子模块"><a href="#6-删除子模块" class="headerlink" title="6. 删除子模块"></a>6. 删除子模块</h2><p>有时子模块的项目维护地址发生了变化，或者需要替换子模块，就需要删除原有的子模块。</p><p>删除子模块较复杂，步骤如下：</p><ol><li><code>git add .gitmodules &amp;&amp; git rm --cached 子模块名称</code> 先暂存<code>.gitmodules</code>文件，否则会报错</li><li><code>rm -rf 子模块目录</code> 删除子模块目录及源码</li><li><code>vi .gitmodules</code> 删除项目目录下<code>.gitmodules</code>文件中子模块相关条目</li><li><code>vi .git/config</code> 删除配置项中子模块相关条目</li><li><code>rm .git/modules/*</code> 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</li></ol><hr><p>执行完删除后，再执行添加子模块命令即可，完成后提交到仓库。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>submodule</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vmware 6 虚拟化 全系列 激活码</title>
    <link href="/p/989cb93b.html"/>
    <url>/p/989cb93b.html</url>
    
    <content type="html"><![CDATA[<h1 id="vmware-6-虚拟化-全系列-激活许可证"><a href="#vmware-6-虚拟化-全系列-激活许可证" class="headerlink" title="vmware 6 虚拟化 全系列 激活许可证"></a>vmware 6 虚拟化 全系列 激活许可证</h1><h2 id="vSphere-6-Hypervisor"><a href="#vSphere-6-Hypervisor" class="headerlink" title="vSphere 6 Hypervisor"></a>vSphere 6 Hypervisor</h2><p>HY0XH-D508H-081U8-JA2GH-CCUM2</p><p>4C4WK-8KH8L-H85J0-UHCNK-8CKQ8</p><p>NV09R-2W007-08D38-CA956-33U28</p><p>JU400-6EK4L-080V9-QT8EP-2KAQ2</p><h2 id="vSphere-6-Hypervisor-for-Embedded-OEMs"><a href="#vSphere-6-Hypervisor-for-Embedded-OEMs" class="headerlink" title="vSphere 6 Hypervisor for Embedded OEMs"></a>vSphere 6 Hypervisor for Embedded OEMs</h2><p>NC6HH-26J4N-48098-Y0AX0-1GA66</p><p>HY0J0-6L28H-081W8-4TCN0-32RP0</p><p>0V012-002DJ-480T1-UHAE0-9GULF</p><p>4G6WR-A0K4M-08420-J8CN6-8A2QA</p><h2 id="vSphere-6-Desktop-Host"><a href="#vSphere-6-Desktop-Host" class="headerlink" title="vSphere 6 Desktop Host"></a>vSphere 6 Desktop Host</h2><p>MF00U-65K53-H8DF9-Q20ZH-26R40</p><p>JV6D2-6YLDN-088C0-Q92N2-8Z00A</p><p>HG49R-2234J-08EJ8-WC9E2-87H2D</p><p>NV6TR-D4HD1-M84L1-P19QM-0PK3D</p><h2 id="vSphere-6-for-vCloud-Service-Provider-Standard"><a href="#vSphere-6-for-vCloud-Service-Provider-Standard" class="headerlink" title="vSphere 6 for vCloud Service Provider Standard"></a>vSphere 6 for vCloud Service Provider Standard</h2><p>JG2JK-DM01L-M8101-J8AZH-3LUH2</p><p>JZ41H-0X153-H8579-A32ZK-16H20</p><p>4A0HU-DU084-H8990-C9376-16KHF</p><p>1V0EA-FNK51-H85K8-H1AN6-2U8PD</p><h2 id="vCloud-Suite-6-Standard"><a href="#vCloud-Suite-6-Standard" class="headerlink" title="vCloud Suite 6 Standard"></a>vCloud Suite 6 Standard</h2><p>HV0N8-AC382-H8ET1-631X6-23K10</p><p>HU4EA-A52E2-H89V9-T295K-0V8Q4</p><p>NZ4XH-2VK43-H8D30-6L974-97800</p><p>NU2DH-DW145-H81Y8-KL0QP-9GAQD</p><h2 id="vCloud-Suite-6-Advanced"><a href="#vCloud-Suite-6-Advanced" class="headerlink" title="vCloud Suite 6 Advanced"></a>vCloud Suite 6 Advanced</h2><p>MU2HU-DEHEQ-M85U0-N3356-07A5D</p><p>HC0R0-AZJE3-08EF1-T99E6-86R32</p><p>HG0JK-F4J1M-08E49-L91Q2-8K832</p><p>5U40R-D615H-M8EZ8-D82ZP-12848</p><h2 id="vCloud-Suite-6-Enterprise"><a href="#vCloud-Suite-6-Enterprise" class="headerlink" title="vCloud Suite 6 Enterprise"></a>vCloud Suite 6 Enterprise</h2><p>JY04H-DFJ01-M8869-428EM-96R60</p><p>5Y04R-AYKE3-H8DR8-NK0EM-1UAL2</p><p>NC682-0GJ4P-08EM1-32ANM-0AU6F</p><p>NZ2JR-6U286-H81N0-8V3Z6-1FHH2</p><h2 id="vSphere-with-Operations-Management-6-Standard"><a href="#vSphere-with-Operations-Management-6-Standard" class="headerlink" title="vSphere with Operations Management 6 Standard"></a>vSphere with Operations Management 6 Standard</h2><p>HZ4J8-AWJ4Q-M8560-YT3Q6-0F052</p><p>JU24R-67H53-H8DF1-4L17K-8U208</p><p>MY6DK-0K1D2-M80T0-UR1Z4-8CK42</p><p>JU4E2-2W085-M8D78-M0AZM-AARKF</p><h2 id="vSphere-with-Operations-Management-6-Enterprise"><a href="#vSphere-with-Operations-Management-6-Enterprise" class="headerlink" title="vSphere with Operations Management 6 Enterprise"></a>vSphere with Operations Management 6 Enterprise</h2><p>JA60R-2JK84-M8DQ1-4L9N0-8VRP2</p><p>MG4T2-FY29P-480F9-9H0X0-16K1D</p><p>1U65R-2Y24N-M8DR1-U2C50-16HQ8</p><p>1V2HU-26KD1-08D60-LH9GK-CPU6F</p><h2 id="vSphere-6-Foundation"><a href="#vSphere-6-Foundation" class="headerlink" title="vSphere 6 Foundation"></a>vSphere 6 Foundation</h2><p>JA6R2-DELEK-H8EP8-83AXP-07RQ8</p><p>0G6EA-07J5M-M8991-TJ0Z6-2U87D</p><p>NU61R-ADKD2-488M9-CV8NH-A6K30</p><p>0Y050-A3L42-084C9-6LCGP-3AR3D</p><h2 id="vSphere-6-Foundation-for-Embedded-OEMs"><a href="#vSphere-6-Foundation-for-Embedded-OEMs" class="headerlink" title="vSphere 6 Foundation for Embedded OEMs"></a>vSphere 6 Foundation for Embedded OEMs</h2><p>HA2JK-42HD4-H80C0-79CZ0-1L012</p><p>JY2E2-6W11L-H81K0-0A274-3ZU36</p><p>4G6HU-FF05N-085L1-R0ANM-C705F</p><p>4Y2TA-2R08P-H80H9-N317H-1ZK16</p><h2 id="vSphere-6-Embedded-Essentials"><a href="#vSphere-6-Embedded-Essentials" class="headerlink" title="vSphere 6 Embedded Essentials"></a>vSphere 6 Embedded Essentials</h2><p>NY6M2-D5H8L-489D0-280Z0-2Q004</p><p>HA080-FP203-M8830-XH9QM-3PU2D</p><p>JF0NH-AGJ0P-H8EW0-2U85H-AU0QA</p><p>HU09A-6F04H-08E90-G28Z6-1A808</p><h2 id="vSphere-6-Embedded-Foundation"><a href="#vSphere-6-Embedded-Foundation" class="headerlink" title="vSphere 6 Embedded Foundation"></a>vSphere 6 Embedded Foundation</h2><p>1A6H8-DT2D3-H8DR8-5L9EK-2AH18</p><p>4V088-D93DL-H89H9-3V8QH-C7H3D</p><p>JU28A-DR3DN-489H9-JC8XH-CZ052</p><p>1U69U-0AL9L-08171-UHCXK-9622A</p><h2 id="vSphere-6-Essentials"><a href="#vSphere-6-Essentials" class="headerlink" title="vSphere 6 Essentials"></a>vSphere 6 Essentials</h2><p>NG2T0-AZ08N-484V0-KRC52-87K2D</p><p>JY412-8MKEH-489U0-KL2Q0-0ZUQ8</p><p>0F44K-85J17-489U8-JH9N6-8F060</p><p>4G28H-0CLDQ-H80J0-V3AZ0-862KA</p><h2 id="vSphere-6-Essentials-for-Retail-and-Branch-Offices"><a href="#vSphere-6-Essentials-for-Retail-and-Branch-Offices" class="headerlink" title="vSphere 6 Essentials for Retail and Branch Offices"></a>vSphere 6 Essentials for Retail and Branch Offices</h2><p>4U6NH-4D0EK-08EU9-JLCZ6-AU0J4</p><p>0G690-4F3EQ-M80G9-AR35M-AAUQ0</p><p>NV29K-8PLE3-480U1-T9970-A6RJD</p><p>1Z2MK-6T243-484J0-6K954-AYULD</p><h2 id="vSphere-6-Essentials-Plus"><a href="#vSphere-6-Essentials-Plus" class="headerlink" title="vSphere 6 Essentials Plus"></a>vSphere 6 Essentials Plus</h2><p>MU2MR-6HH1P-48E11-8J3G4-2Y8NF</p><p>HY0JR-AHK4H-08EM8-W22X6-0KU3F</p><p>4Z0RH-0YK55-48089-820Z6-AC852</p><p>JZ4HR-DJJ50-M84G0-LJ0G4-A22QF</p><h2 id="vSphere-6-Essentials-Plus-for-Retail-and-Branch-Offices"><a href="#vSphere-6-Essentials-Plus-for-Retail-and-Branch-Offices" class="headerlink" title="vSphere 6 Essentials Plus for Retail and Branch Offices"></a>vSphere 6 Essentials Plus for Retail and Branch Offices</h2><p>1Y24U-6K05Q-48989-PR9G2-CA262</p><p>NV0XK-6ML00-H8D21-FR954-AG0ND</p><p>1G2MA-A2201-48DJ1-HC2E0-3ZA14</p><p>1V65R-0ZJ55-08870-KLAQH-0UA3F</p><h2 id="vSphere-6-Standard"><a href="#vSphere-6-Standard" class="headerlink" title="vSphere 6 Standard"></a>vSphere 6 Standard</h2><p>MG2T2-8FK0Q-H88H0-6RC50-9LU58</p><p>JU600-6YH91-M8DR8-D1CGP-330ND</p><p>HV2WH-D2192-M84K1-RLC56-1A862</p><p>HG6R2-8NH52-088H9-X33QP-C68KD</p><h2 id="vSphere-6-Standard-for-Embedded-OEMs"><a href="#vSphere-6-Standard-for-Embedded-OEMs" class="headerlink" title="vSphere 6 Standard for Embedded OEMs"></a>vSphere 6 Standard for Embedded OEMs</h2><p>4F6XU-ADK50-488K0-UJ0ZM-1U8J8</p><p>0Z29R-A028L-M80J9-3H3N6-8UU2D</p><p>1Y68K-AG206-M8E38-298N0-8VUJD</p><p>HF252-0X391-H8029-H835M-33834</p><h2 id="vSphere-6-Enterprise"><a href="#vSphere-6-Enterprise" class="headerlink" title="vSphere 6 Enterprise"></a>vSphere 6 Enterprise</h2><p>5Y04A-8934J-M85P1-3K37H-9P04D</p><p>JA2NH-2Z191-08501-NCAX2-2VK4F</p><p>0F2T2-DCK93-M88M8-7J9E4-16RJ0</p><p>NU0EK-05100-M80N9-501N2-8G81D</p><h2 id="vSphere-6-Enterprise-for-Embedded-OEMs"><a href="#vSphere-6-Enterprise-for-Embedded-OEMs" class="headerlink" title="vSphere 6 Enterprise for Embedded OEMs"></a>vSphere 6 Enterprise for Embedded OEMs</h2><p>0V050-0XL9N-M85A8-LU1GK-0UA52</p><p>NG6H2-FT186-H8EV8-UH9NP-1F208</p><p>5Y400-4G2EJ-481W8-R80GM-2K2NF</p><p>4Z44H-4R19K-H88T8-CT87P-0CKMD</p><h2 id="vSphere-6-Enterprise-Plus"><a href="#vSphere-6-Enterprise-Plus" class="headerlink" title="vSphere 6 Enterprise Plus"></a>vSphere 6 Enterprise Plus</h2><p>1F6XH-8VJ9L-481Y9-L835P-CFHHA</p><p>1G28U-AW18P-08189-72AE6-9URP8</p><p>4Y29R-D034H-48561-RLAG0-ACU40</p><p>JU640-0JKE3-088J9-GRCXK-2PRH6</p><h2 id="vSphere-6-Enterprise-Plus-for-Embedded-OEMs"><a href="#vSphere-6-Enterprise-Plus-for-Embedded-OEMs" class="headerlink" title="vSphere 6 Enterprise Plus for Embedded OEMs"></a>vSphere 6 Enterprise Plus for Embedded OEMs</h2><p>1U0H2-DX354-H8961-Z2CN6-3C0M4</p><p>MY2DH-AFKDL-081A9-WR1XK-13HH8</p><p>5V2E2-AMLE4-08EF1-QHAZM-8YK20</p><p>4V692-D3KEL-M8088-NUAQ6-1Q0MD</p><h2 id="vCenter-Server-6-Essentials"><a href="#vCenter-Server-6-Essentials" class="headerlink" title="vCenter Server 6 Essentials"></a>vCenter Server 6 Essentials</h2><p>NU68U-6D04K-08EV8-GK95K-9LRN6</p><p>HG2T0-6F3D3-489L9-2T9QH-3QR12</p><p>HZ05H-0W1EL-08EC0-E8AEK-8CKMF</p><p>4V24K-0J34Q-084D8-X19E2-03U2D</p><h2 id="vCenter-Server-6-Foundation"><a href="#vCenter-Server-6-Foundation" class="headerlink" title="vCenter Server 6 Foundation"></a>vCenter Server 6 Foundation</h2><p>MV692-29093-M85H0-6RC76-1Q230</p><p>5A6MU-0N057-08EF8-NT1Q0-2FU7D</p><p>5C21A-6XK4H-089K8-2385M-3PAM8</p><p>NG6RA-ANK91-089Z9-P93ZH-0G016</p><h2 id="vCenter-Server-6-Standard"><a href="#vCenter-Server-6-Standard" class="headerlink" title="vCenter Server 6 Standard"></a>vCenter Server 6 Standard</h2><p>HG612-FH19H-08DL1-V19X2-1VKND</p><p>NU4JA-4V2DQ-48428-T32GK-8VRN4</p><p>0Y4H2-8P217-H8900-M8AE4-2LH44</p><p>NA658-2308J-08809-93AQ6-278J0</p><h2 id="vCenter-Server-6-Standard-for-Embedded-OEMs"><a href="#vCenter-Server-6-Standard-for-Embedded-OEMs" class="headerlink" title="vCenter Server 6 Standard for Embedded OEMs"></a>vCenter Server 6 Standard for Embedded OEMs</h2><p>1G2NU-AZL54-484X0-3TAN0-9GH2A</p><p>JG69A-2T155-088J1-00A5M-1C0L8</p><p>HC45A-DEK1M-081C9-QKCZ0-C2K3D</p><p>NC4M8-2CL0M-08159-5V0E2-1GR3A</p><h2 id="Virual-SAN-Standard"><a href="#Virual-SAN-Standard" class="headerlink" title="Virual SAN Standard"></a>Virual SAN Standard</h2><p>HZ2E0-0RKDL-485Y8-3L150-AYU52</p><p>NA69A-2Q385-M84D1-13370-322H2</p><p>HA0RU-FEL03-M8408-AUA7M-2U8JD</p><p>0F0J8-8YH8P-488F1-JCAN0-1V21D</p><h2 id="Virual-SAN"><a href="#Virual-SAN" class="headerlink" title="Virual SAN"></a>Virual SAN</h2><p>JU2D8-4CL82-088R1-RLAX2-3K8L0</p><p>1A6JU-0JK0P-481W0-70AE0-2QAJ8</p><p>4C48A-27HDH-48001-YH2E4-9ZUQF</p><p>4V252-FHH8K-480A1-VCAQM-A2KQ4</p><h2 id="Virual-SAN-for-Desktop"><a href="#Virual-SAN-for-Desktop" class="headerlink" title="Virual SAN for Desktop"></a>Virual SAN for Desktop</h2><p>4F25K-4N392-M8161-132XP-1GR3F</p><p>0A4MR-49K93-08890-FR97K-93R4A</p><p>JU2EH-08K4N-M8DC0-4T3E2-33UH4</p><p>4Z6MU-2J383-481N1-G91QP-1Y2PA</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>激活码</tag>
      
      <tag>虚拟化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>categories</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>我就是我，不一样的烟火！！</p><p>你可以在这里阅读我的生活&#x3D;&#x3D;&gt;<a href="https://dkl-justdoit.github.io/">vaincourtship</a></p><p>我觉着学习的过程就是一个持续不断的一直问为什么的过程，当你一直问一直问，到最后你可能就会发现你已经深入到了一定的程度，并且对于知识的理解有了属于你自己的全新的见解与认识。</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>tags</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>留言板</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>欢迎留言，请留下邮箱方便我回复您！</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[!(function() {  /** 计时起始时间，自行修改 **/  var start = new Date("2022/06/18 13:00:00");  function update() {    var now = new Date();    now.setTime(now.getTime()+250);    days = (now - start) / 1000 / 60 / 60 / 24;    dnum = Math.floor(days);    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);    hnum = Math.floor(hours);    if(String(hnum).length === 1 ){      hnum = "0" + hnum;    }    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);    mnum = Math.floor(minutes);    if(String(mnum).length === 1 ){      mnum = "0" + mnum;    }    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);    snum = Math.round(seconds);    if(String(snum).length === 1 ){      snum = "0" + snum;    }    document.getElementById("timeDate").innerHTML = "本站安全运行&nbsp"+dnum+"&nbsp天";    document.getElementById("times").innerHTML = hnum + "&nbsp小时&nbsp" + mnum + "&nbsp分&nbsp" + snum + "&nbsp秒";  }  update();  setInterval(update, 1000);})();]]></content>
    
  </entry>
  
  
  
</search>
